<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>BIT150</title>
 <link href="http://localhost:4000/BIT150_website/atom.xml" rel="self"/>
 <link href="http://localhost:4000/BIT150_website/"/>
 <updated>2017-11-30T14:30:06-08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Dan Runcie and Shawn Higdon</name>
   <email></email>
 </author>

 
 <entry>
   <title>Lab 9 - Genome Annotation</title>
   <link href="http://localhost:4000/2017/11/30/lab-09/"/>
   <updated>2017-11-30T00:00:00-08:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/11/30/lab-09</id>
   <content type="html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-setup&quot;&gt;Getting Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gene-prediction&quot;&gt;Gene Prediction&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#prokka&quot;&gt;PROKKA&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#pan-genome-analysis-with-roary&quot;&gt;Pan-genome analysis&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#visualizing-in-r&quot;&gt;Analysis in R&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lab-9-assignment&quot;&gt;Lab 9 Assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;laboratory-objectives&quot;&gt;Laboratory Objectives&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Learn concepts and principles related to genome annotation&lt;/li&gt;
  &lt;li&gt;Explore strategies for downstream analysis of genome annotations&lt;/li&gt;
  &lt;li&gt;Develop shell scripts to automate the annotation of multiple assemblies&lt;/li&gt;
  &lt;li&gt;As part of the assignment, responses to all &lt;strong&gt;Thought Questions&lt;/strong&gt; will be required&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;getting-setup&quot;&gt;Getting Setup&lt;/h1&gt;

&lt;p&gt;Last week, we assembled the genome of &lt;em&gt;E. coli&lt;/em&gt; O104:H4 strain TY-2482. This bacterium was identified as a virulent human pathogen that lead to a food-bourne disease outbreak in Europe. Today we will continue working with this organism by annotating its genome at the command line using programs on the &lt;strong&gt;farm cluster&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To begin:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to farm at the command line: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh user-id@farm.cse.ucdavis.edu&lt;/code&gt; and enter your password.&lt;/li&gt;
  &lt;li&gt;Once you are logged in, request the following resources for an interactive job to use in lab today:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  srun -p bit150 -t 4:00:00 --mem=8000 -n 1 -c 3 --pty bash -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;gene-prediction&quot;&gt;Gene Prediction&lt;/h1&gt;

&lt;p&gt;There are two major strategies for predicting genes within genome assemblies: reference based sequence alignment and &lt;em&gt;Ab initio&lt;/em&gt; (from the beginning) - we will be exploring the latter. While there are pros and cons to both strategies, the &lt;em&gt;Ab initio&lt;/em&gt; strategy is useful when a reference genome does not exist for the organism that has been sequenced. By this point, you are aware that genome features exist in several forms, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Protein Coding sequences&lt;/li&gt;
  &lt;li&gt;Transfer RNAs (tRNAs)&lt;/li&gt;
  &lt;li&gt;Ribosomal RNAs (rRNAs)&lt;/li&gt;
  &lt;li&gt;Non-coding RNAs (ncRNAs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these DNA feature types can be modeled based on the tetranucleotide patterns and frequencies associated their occurrence in nature. Consequently, there are several Bioinformatics programs that have been developed to &lt;em&gt;annotate&lt;/em&gt; the stretches of genomic DNA and identify specific feature types. Today we will learn how to use the program &lt;strong&gt;Prokka&lt;/strong&gt; to annotate our &lt;em&gt;E. coli&lt;/em&gt; assembly. Prokka integrates a suite of genome annotation programs to comprehensively annotate a prokaryotic genome.&lt;/p&gt;

&lt;h2 id=&quot;exercise&quot;&gt;Exercise&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Describe potential benefits and limitations associated with using sequence alignment based techniques for genome annotation vs. &lt;em&gt;Ab initio&lt;/em&gt; strategies.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;prokka&quot;&gt;PROKKA&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tseemann/prokka&quot; target=&quot;_blank&quot;&gt;Prokka: rapid prokaryotic genome annotation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://academic.oup.com/bioinformatics/article/30/14/2068/2390517&quot; target=&quot;_blank&quot;&gt;Prokka - iSCB Bioinformatics article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Prokka is a bioinformatics program that is commonly used to annotate prokaryotic genomes using minimal computational resources. The major requirement of the input files is that they must be in &lt;em&gt;FASTA&lt;/em&gt; format.&lt;/p&gt;

&lt;h2 id=&quot;programs-used-to-predict-genome-features&quot;&gt;Programs used to predict genome features&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/prokka-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-simplified-schema-of-the-prokka-pipeline&quot;&gt;A Simplified Schema of the PROKKA pipeline&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/prokka-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;command-line-options&quot;&gt;&lt;a href=&quot;https://github.com/tseemann/prokka#command-line-options&quot; target=&quot;_blank&quot;&gt;Command Line Options&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;To view the command line options, we need to load the prokka module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load tbl2asn prokka
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, type the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prokka
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This should bring up a menu of the command line options that looks very similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/prokka-3.png&quot; alt=&quot;&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;annotating-your-e-coli-genome-assembly&quot;&gt;Annotating your &lt;em&gt;E. coli&lt;/em&gt; genome assembly&lt;/h2&gt;

&lt;p&gt;Today you will annotate the assembled genome of &lt;em&gt;E. coli&lt;/em&gt; O104:H4 strain TY-2482 that was generated last week.&lt;/p&gt;

&lt;p&gt;First, create a folder in your home directory to work in for today’s lab:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir Lab_9
cd Lab_9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Similar to last week, &lt;strong&gt;link-in&lt;/strong&gt; the data from the data storage directory for the class:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s /group/BIT150/Lab_8/megahit_results/final.contigs.fa ./ecoli_TY2482.contigs.fa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We re-name the file to &lt;code class=&quot;highlighter-rouge&quot;&gt;ecoli_TY2482.contigs.fa&lt;/code&gt; because later we’ll load assemblies of other bacteria, and we want to keep organized.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;time prokka --outdir prokka_annotation --prefix E.coli_TY-2482 --cpus 3 ecoli_TY2482.contigs.fa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Adding the time command before any command will print the compute time when the task is completed.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While this is running, let’s discuss the output formats &lt;strong&gt;(It should take about 5-10 minutes for PROKKA to finish)&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;output-formats&quot;&gt;Output Formats&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/prokka-4.png&quot; alt=&quot;&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;While many of the output formats serve the purpose of submitting data to &lt;strong&gt;NCBI&lt;/strong&gt;, some useful formats for further analysis are the &lt;em&gt;FASTA amino acid&lt;/em&gt; (&lt;strong&gt;.faa&lt;/strong&gt;) and &lt;em&gt;GFF3 - General Feature Format 3&lt;/em&gt; (&lt;strong&gt;.gff&lt;/strong&gt;). Let’s do something with the GFF3 file we just created!&lt;/p&gt;

&lt;h2 id=&quot;exercise-1&quot;&gt;Exercise&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;PROKKA&lt;/strong&gt; annotates protein coding sequences using &lt;strong&gt;BLAST&lt;/strong&gt;. What modifications to the &lt;code class=&quot;highlighter-rouge&quot;&gt;prokka&lt;/code&gt; command would you have to make in order to increase the specificity of annotation assignments in your &lt;em&gt;E. coli&lt;/em&gt; O104:H4 strain TY-2482 genome assembly?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;pan-genome-analysis-with-roary&quot;&gt;Pan Genome Analysis with Roary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sanger-pathogens.github.io/Roary/&quot;&gt;Roary: The Pan Genome&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://academic.oup.com/bioinformatics/article/31/22/3691/240757&quot;&gt;Roary - iSCB Bioinformatics Article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have annotated the genome of our virulent strain, and identified genes, we need a way to discover which genes might be the source of virulence. One way to do this is to compare the genes we found with genes in a closely related avirulent species.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Roary&lt;/strong&gt; compares the annotation files of multiple prokaryotic genomes to identify a &lt;strong&gt;Pan Genome&lt;/strong&gt;, which is the union of all genes identified among all the genomes. This is useful for identifying a set of &lt;strong&gt;Core genes&lt;/strong&gt; present in all genomes, and a set of &lt;strong&gt;Accessory Genes&lt;/strong&gt; which are present in some, but not all genomes.&lt;/p&gt;

&lt;p&gt;We’ve included the &lt;strong&gt;GFF3&lt;/strong&gt; file for the &lt;em&gt;avirulent reference&lt;/em&gt; strain of &lt;em&gt;E. coli O104:H4&lt;/em&gt;, which is closely related to TY-2482 in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Lab_9&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;To begin the Pan Genome analysis, let’s make a new sub-directory inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lab_9&lt;/code&gt; directory and move into it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir roary
cd roary
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, &lt;strong&gt;link-in&lt;/strong&gt; the &lt;strong&gt;GFF3&lt;/strong&gt; file for the &lt;em&gt;avirulent reference&lt;/em&gt; strain of &lt;em&gt;E. coli O104:H4&lt;/em&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Lab_9&lt;/code&gt; folder, and the &lt;strong&gt;GFF3&lt;/strong&gt; file from your &lt;strong&gt;prokka_annotation&lt;/strong&gt; folder to your present working directory (roary):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ln -s /group/BIT150/Lab_9/E.coli_O104-H4.gff .
ln -s ../prokka_annotation/E.coli_TY-2482.gff .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point, you should have &lt;strong&gt;two GFF files&lt;/strong&gt; in your present working directory - check by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To begin using the program, we need to load another module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load bio3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, let’s bring up the roary options menu:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roary
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, roary has many options for customizing your pan-genome analysis. Today we will keep things fairly straight forward. Run the following command to generate the core gene alignment and associated pan genome output files (&lt;strong&gt;Note&lt;/strong&gt;:&lt;em&gt;This takes about 20 minutes&lt;/em&gt; to finish):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;time roary -i 90 -e --mafft -p 3 *.gff
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;While this is running, begin answering the thought questions, or begin setting up your R Studio environment for the next step.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once your Pan Genome analysis is completed, check out the statistics:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less summary_statistics.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;q to exit less window&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The main file we want to investigate for our comparative analysis is in the &lt;code class=&quot;highlighter-rouge&quot;&gt;gene_presence_absence.csv&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Have a look:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less gene_presence_absence.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the data is easy to interpret here. Let’s analyze the data in R and make a plot.&lt;/p&gt;

&lt;h2 id=&quot;visualizing-in-r&quot;&gt;Visualizing in R&lt;/h2&gt;

&lt;p&gt;We will use R Studio to analyze the data. &lt;strong&gt;The objective is to create a simple Venn Diagram&lt;/strong&gt; that shows the number of unique genes in the virulent strain of &lt;em&gt;E. coli&lt;/em&gt;, the number of unique genes in the avirulent strain of &lt;em&gt;E. coli&lt;/em&gt;, and the number of shared genes between them (the Core genome between the two).&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;First, Launch R Studio, then create a new R project (essentially an entire directory dedicated to a single R analysis project):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;(File -&amp;gt; New Project -&amp;gt; New Directory -&amp;gt; Empty Project -&amp;gt; &lt;em&gt;Name your directory something like R_roary&lt;/em&gt;)&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, we need to get the file from the HPC server onto our local computers. Launch &lt;strong&gt;File Zilla&lt;/strong&gt;, connect to farm as you have done in the past, and transfer the &lt;code class=&quot;highlighter-rouge&quot;&gt;gene_presence_absence.csv&lt;/code&gt; file to the folder on your workstation’s hard-drive that corresponds to the &lt;strong&gt;R project directory&lt;/strong&gt; you just created. Once this file is transferred, it should be visible in the R Studio window’s file browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab9-R-1.png&quot; alt=&quot;&quot; target=&quot;_blank&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Create a New Rscript (.R), and save the file with a descriptive name - this file is where you will save all of your work:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;(File -&amp;gt; New File -&amp;gt; R Script)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;em&gt;Recall that commands are run from the R script editor by holding the &lt;strong&gt;control&lt;/strong&gt; key and pressing &lt;strong&gt;enter&lt;/strong&gt; on a given line or highlighted text&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The R package we will use to make the Venn Diagram is called, &lt;a href=&quot;https://rstudio-pubs-static.s3.amazonaws.com/13301_6641d73cfac741a59c0a851feb99e98b.html&quot; target=&quot;_blank&quot;&gt;VennDiagram&lt;/a&gt;. We will also use the &lt;strong&gt;dplyr&lt;/strong&gt; package to filter our dataset.&lt;/p&gt;

&lt;p&gt;Load the necessary R Package libraries:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(dplyr)
install.packages('VennDiagram')
library(VennDiagram)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To begin, read in the &lt;em&gt;csv&lt;/em&gt; file as a dataframe, treating the first line as a header and filling in all blank cells with an “NA”:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;roary_data &amp;lt;- read.csv(&quot;./gene_presence_absence.csv&quot;, header = T, na.strings=c(&quot;&quot;,&quot;NA&quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Recall that you may view the dataframe using the &lt;code class=&quot;highlighter-rouge&quot;&gt;View()&lt;/code&gt; command or by clicking the table icon of the &lt;code class=&quot;highlighter-rouge&quot;&gt;R Environment&lt;/code&gt; pane of the R Studio session.&lt;/p&gt;

&lt;h3 id=&quot;filter-the-data&quot;&gt;Filter the Data&lt;/h3&gt;
&lt;p&gt;The next step is to identify the number of Accessory Genome genes that correspond to either &lt;em&gt;E. coli&lt;/em&gt; O104:H4 strain TY-2482, or the reference strain that is avirulent. To do this, we will use a series of filtering steps in order to produce three new dataframes that represent subsets of the entire roary pan genome dataset that we generated.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subset the Core genome:&lt;/strong&gt; Filter by genes that are found in both genotypes (&lt;code class=&quot;highlighter-rouge&quot;&gt;No..isolates&lt;/code&gt; column == 2)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;core &amp;lt;- roary_data %&amp;gt;% filter(No..isolates == 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subset the Accessory genome:&lt;/strong&gt; Filter by genes that are found in only 1 of the 2 genotypes (&lt;code class=&quot;highlighter-rouge&quot;&gt;No..isolates&lt;/code&gt; column == 1)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;accessory_genome &amp;lt;- roary_data %&amp;gt;% filter(No..isolates == 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subset the TY-2482 Accessory genome:&lt;/strong&gt; Filter by genes that are not &lt;code class=&quot;highlighter-rouge&quot;&gt;NA&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;E.coli_TY.2842&lt;/code&gt; column&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TY2482_only &amp;lt;- accessory_genome %&amp;gt;% filter(!is.na(E.coli_TY.2842))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Subset the Accessory genome of the Reference genome:&lt;/strong&gt; Filter by genes that are not &lt;code class=&quot;highlighter-rouge&quot;&gt;NA&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;E.coli_ref &lt;/code&gt; column&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reference_only &amp;lt;- accessory_genome %&amp;gt;% filter(!is.na(E.coli_ref))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;making-the-venn-diagram&quot;&gt;Making the Venn Diagram&lt;/h3&gt;

&lt;p&gt;Each row in the subsetted datasets represents an annotated gene. Thus, we can count the row numbers of each genome subset, store the values in R-type objects and call on these R environment objects to make our plot:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Count the number of rows in each Pan genome subset:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;core_size &amp;lt;- nrow(core)
TY_2482_accessory_size &amp;lt;- nrow(TY_2482_only)
ref_accessory_size &amp;lt;- nrow(reference_only)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Make the diagram:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grid.newpage()
draw.pairwise.venn(
  area1 = TY_2482_accessory_size + core_size, # count # genes in TY2482
  area2 = ref_accessory_size + core_size, # count # genes in Ecoli_ref
  cross.area = core_size, # count number of genes in both
  category = c(&quot;Virulent&quot;, &quot;Avirulent&quot;),
  fill = c(&quot;blue&quot;, &quot;red&quot;)
  )
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we are visualizing the Pan-genome in a simplistic fashion, but this opens the door to further exploration of each isolate’s contribution to the accessory genome of the comparison.&lt;/p&gt;

&lt;h3 id=&quot;exercise-2&quot;&gt;Exercise&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find a gene or two that you think might be relevant to the virulence of the organism. Explain your reasoning.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lab-9-assignment&quot;&gt;Lab 9 Assignment&lt;/h2&gt;

&lt;p&gt;For the assignment, create a markdown document that addresses the following and submit the document to canvas in &lt;strong&gt;html&lt;/strong&gt; format:&lt;/p&gt;

&lt;h3 id=&quot;part-1-exercise-questions&quot;&gt;Part 1: Exercise Questions&lt;/h3&gt;

&lt;p&gt;Provide a response to each of the three &lt;strong&gt;&lt;em&gt;Exercise Questions&lt;/em&gt;&lt;/strong&gt; that are presented at the end of major sections in this lab.&lt;/p&gt;

&lt;h3 id=&quot;part-2-rast-annotation&quot;&gt;Part 2: RAST Annotation&lt;/h3&gt;

&lt;p&gt;A very widely used web-based tool for microbial genome annotation is &lt;strong&gt;RAST&lt;/strong&gt;. Your task is to figure out how to use this program (which is similar to Prokka), use it to re-annotate the &lt;code class=&quot;highlighter-rouge&quot;&gt;E.coli_TY.2842&lt;/code&gt; assembly, and then use &lt;code class=&quot;highlighter-rouge&quot;&gt;roary&lt;/code&gt; again to identify &lt;em&gt;Core&lt;/em&gt; and genome-specific genes for the two bacteria. Present a Venn diagramm of the results of the RAST annotation.&lt;/p&gt;

&lt;p&gt;The RAST program is available here: &lt;a href=&quot;http://rast.nmpdr.org/&quot;&gt;RAST&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You have to register for an account to use RAST. Please register today (it might take a day to get accepted!)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;project-3.md&quot;&gt;Project 3&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 8 - Genome Assembly</title>
   <link href="http://localhost:4000/2017/11/16/lab-08/"/>
   <updated>2017-11-16T00:00:00-08:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/11/16/lab-08</id>
   <content type="html">&lt;h1 id=&quot;overview&quot;&gt;Overview&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#getting-setup&quot;&gt;Getting Setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#illumina-paired-end-reads&quot;&gt;Illumina Paired End Reads&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#fastq-file-format&quot;&gt;FastQ File Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#genome-assembly&quot;&gt;Genome Assembly&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#putting-it-all-together&quot;&gt;Putting it all Together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#lab-8-assignment&quot;&gt;Lab 8 Assignment&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;laboratory-objectives&quot;&gt;Laboratory Objectives&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Familiarize concepts and principles related to genome sequencing&lt;/li&gt;
  &lt;li&gt;Interpret genome assembly quality using standardized metrics&lt;/li&gt;
  &lt;li&gt;Develop shell scripts that combine multiple programs for data analysis&lt;/li&gt;
  &lt;li&gt;As part of the assignment, responses to all &lt;strong&gt;Thought Questions&lt;/strong&gt; will be required&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-setup&quot;&gt;Getting Setup&lt;/h2&gt;

&lt;p&gt;Today, you will analyze and process raw DNA sequence files from an &lt;em&gt;Escherichia coli&lt;/em&gt; genome at the command line using programs on the &lt;strong&gt;farm cluster&lt;/strong&gt;. Recall that in order to run computationally intensive commands on the farm cluster, we must first request the necessary compute space &lt;strong&gt;outside of the login node&lt;/strong&gt; using the &lt;code class=&quot;highlighter-rouge&quot;&gt;srun&lt;/code&gt; command.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Login to farm at the command line: &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh user-id@farm.cse.ucdavis.edu&lt;/code&gt; and enter your password.&lt;/li&gt;
  &lt;li&gt;Once you are logged in, request the resources for an interactive job to use in lab today:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srun -p bit150 -t 2:00:00 --mem=8000 -n 2 --pty bash -l&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;linking-sequence-data-into-a-working-directory&quot;&gt;Linking sequence data into a working directory&lt;/h3&gt;

&lt;p&gt;Once we have our interactive jobs running, the next step is to create a directory to work in for today’s lab. We will put all files and subfolders associated with this lab into the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;~/lab_08&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir -p ~/Lab_8&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s create a &lt;code class=&quot;highlighter-rouge&quot;&gt;symbolic link&lt;/code&gt; to each of the data files that we will be working with today from the &lt;code class=&quot;highlighter-rouge&quot;&gt;/groups/BIT150/Lab_8&lt;/code&gt; folder. These two files contain the raw nucleotide reads for the Escherichia coli O104:H4 str. TY-2482 genome. To do this, we need to move into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Lab_8&lt;/code&gt; directory and then type the command to create symbolic links.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd Lab_8
ln -s /group/BIT150/Lab_8/*.fastq.gz .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To verify that the symbolic links were created, type the following command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You should see output similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;total 0
lrwxrwxrwx 1 smhigdon smhigdon 40 Nov 15 22:11 SRR292770_1.fastq.gz -&amp;gt; /group/BIT150/Lab_8/SRR292770_1.fastq.gz
lrwxrwxrwx 1 smhigdon smhigdon 40 Nov 15 22:11 SRR292770_2.fastq.gz -&amp;gt; /group/BIT150/Lab_8/SRR292770_2.fastq.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These are FASTQ files - let’s explore the meaning of the data contained within them…&lt;/p&gt;

&lt;h2 id=&quot;illumina-paired-end-reads&quot;&gt;Illumina Paired End Reads&lt;/h2&gt;

&lt;p&gt;Illumina reads come in two styles - single read &lt;strong&gt;(SR)&lt;/strong&gt; and paired end reads &lt;strong&gt;(PE)&lt;/strong&gt;. &lt;strong&gt;SR&lt;/strong&gt; read data of sequencing libraries is generally less expensive to generate, while &lt;strong&gt;PE&lt;/strong&gt; read data is more costly to generate but contains additional information that is advantageous for generating genome assemblies. Illumina sequences are generated using the &lt;strong&gt;sequencing by synthesis method:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Paired end reads provide more information than single end reads because they provide sequence information pertaining to the reverse compliment of each sequence insert. This will often allow for the creation of a genome assembly with higher contiguity because the paired end reads can be used to resolve uncertainty in genomic regions of nucleotide residue homogeneity &lt;strong&gt;(homopolymer repeats)&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;fastq-file-format&quot;&gt;FASTQ File format&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/FASTQ_format&quot; target=&quot;_blank&quot;&gt;FASTQ Format&lt;/a&gt; is the standard file format for Illumina sequence data. This file format is what you should currently expect to receive when downloading sequence data either from an online repository or from the file server of a DNA sequencing facility. However, fastq files are not the first form of the data that is generated from Illumina sequencers:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The fastq files contain data associated with each DNA insert read sequence generated from each PCR-amplified cluster on an Illumina flowcell. Each short read sequence record within the fastq files contain 4 lines:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have an idea of what a fastq file should look like, lets take a look at our files to make sure they meet the criteria for the fastq format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gunzip -c SRR292770_1.fastq.gz | less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;(use the spacebar to scroll down, and type ‘q’ to exit ‘less’)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gunzip -c SRR292770_2.fastq.gz | less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the two files have a common identifier that designates them as coming from the same sample. Now that we have confirmed the content of our files, let’s move on to assembling the reads into a genome.&lt;/p&gt;

&lt;h4 id=&quot;thought-questions&quot;&gt;Thought Questions&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Why are there &lt;code class=&quot;highlighter-rouge&quot;&gt;_1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;_2&lt;/code&gt; in the file names?&lt;/li&gt;
    &lt;li&gt;Why is each of the four lines from a fastq file read important?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;genome-assembly&quot;&gt;Genome Assembly&lt;/h2&gt;

&lt;p&gt;There are two main strategies for genome assembly using DNA sequencing reads, &lt;strong&gt;&lt;em&gt;de novo&lt;/em&gt; assembly&lt;/strong&gt; and &lt;strong&gt;reference based mapping&lt;/strong&gt;. Among the algorithm types used to carry out &lt;strong&gt;&lt;em&gt;de novo&lt;/em&gt; assembly&lt;/strong&gt;, the two most common strategies are &lt;strong&gt;&lt;em&gt;De Bruijn Graph Assembly&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Overlap Layout Consensus&lt;/em&gt;&lt;/strong&gt;. For more information on the differences between these two, here are links to some papers if you are interested:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/22184334&quot; target=&quot;_blank&quot;&gt;Li et al., 2012&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2336801/&quot; target=&quot;_blank&quot;&gt;Zerbino et al., 2008&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sciencedirect.com/science/article/pii/S0888754310000492&quot; target=&quot;_blank&quot;&gt;Miller et al., 2010&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;De Bruijn Graph Assembly&lt;/em&gt;&lt;/strong&gt; involves breaking all of the sequence reads down into smaller sequence fragments &lt;strong&gt;(substrings)&lt;/strong&gt; of a specified length &lt;strong&gt;(k-size)&lt;/strong&gt;, which are commonly referred to as &lt;strong&gt;k-mers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The k-mers are typically ordered within a &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table&quot; target=&quot;_blank&quot;&gt;hash table&lt;/a&gt;, and a directional network graph is then constructed. Here is an example using a k-size of 3 that demonstrates the concept:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/lab8-6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;megahit&quot;&gt;MEGAhit&lt;/h3&gt;

&lt;p&gt;To assemble the &lt;em&gt;E. coli&lt;/em&gt; genome reads we have been working with, we will use &lt;strong&gt;MEGAhit&lt;/strong&gt;, which is an ultra-fast short read assembly program that takes a &lt;em&gt;De Bruijn Graph&lt;/em&gt; approach. MEGAhit was designed for metagenome assembly, but it can also be used to assemble the shotgun whole genome sequence data from the DNA libraries of mono-isolate microbial genomes as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The paper can be found &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/pubmed/25609793&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/voutcn/megahit&quot; target=&quot;_blank&quot;&gt;MEGAhit source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;k-mer-size-assembly-activity&quot;&gt;k-mer size assembly activity&lt;/h3&gt;

&lt;p&gt;One question you may have thought of is, &lt;strong&gt;“which k-mer size should be used for the assembly”&lt;/strong&gt; or, &lt;strong&gt;“is there an optimal k-mer size for assembly?”&lt;/strong&gt; We will now do an in-class exercise together to investigate these questions.&lt;/p&gt;

&lt;p&gt;Let’s work together to answer these questions by assembling the read data using all possible k-mer sizes for the data that MEGAhit will allow. MEGAhit only allows for k-mer sizes of odd numbers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First&lt;/strong&gt;, click the following link to get to a live googlesheet for this exercise: &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Oxw2HLbRqEqduValTQ__I7atl23L6gMHZgwiwUj8UMU/edit#gid=0&quot; target=&quot;_blank&quot;&gt;https://docs.google.com/spreadsheets/d/1Oxw2HLbRqEqduValTQ__I7atl23L6gMHZgwiwUj8UMU/edit#gid=0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, choose a k-mer size and fill in your name. &lt;strong&gt;Our goal is to cover all k-mer sizes in this exercise, so if you see an empty slot, grab it.&lt;/strong&gt; Because the sequence read data we are working was generated using only 50 amplification cycles, we have really short reads and will only be able to cover 17 k-mer sizes during this exercise. If all of the k-mers have already been chosen, just choose the one you like the most, add your name in the column and continue with the exercise.&lt;/p&gt;

&lt;p&gt;Once you have selected a k-mer size for your assembly, in the same directory containing the symbolic links to the fastq files we generated (~/lab_8), type the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load megahit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Recall that loading this module will connect your &lt;strong&gt;PATH&lt;/strong&gt; environment variable to the directory with code for the MEGAhit program.&lt;/p&gt;

&lt;p&gt;Now, type or copy the following command, and replace the &lt;em&gt;##&lt;/em&gt; characters with your chosen k-mer size.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;megahit --k-min ## --k-max ## --kmin-1pass -t 2 -1 SRR292770_1.fastq.gz -2 SRR292770_2.fastq.gz -o megahit_Ecoli_k##
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After you enter this command, you will see lines of code begin to appear at the prompt.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;While the program is running, let’s discuss some aspects of the assembly output MEGAhit will provide.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Number of assembled &lt;strong&gt;contigs&lt;/strong&gt; (contiguous sequences of DNA)&lt;/li&gt;
  &lt;li&gt;Total assembly length (in bp)&lt;/li&gt;
  &lt;li&gt;The N50 value
    &lt;ul&gt;
      &lt;li&gt;Note that one of the most common assembly statistics is the &lt;strong&gt;N50&lt;/strong&gt; value.&lt;/li&gt;
      &lt;li&gt;The &lt;strong&gt;N50&lt;/strong&gt; value of an assembly is defined as the length of the smallest contig within a subset of the largest assembled contigs whose sum represents 50 percent of the total number of bases assembled.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When your assembly is complete, copy and paste the assembly statistics reported in the terminal by MEGAhit into the &lt;strong&gt;googlesheet&lt;/strong&gt; for your chosen k-mer size.&lt;/p&gt;

&lt;p&gt;You can also explore the assembly file generated with MEGAhit by typing the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less -S megahit_Ecoli_k##/final.contigs.fa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;** Again, replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; characters with your chosen k-mer size.&lt;/p&gt;

&lt;h4 id=&quot;thought-questions-1&quot;&gt;Thought Questions&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Why and how do different k-mer sizes affect the assembly results?&lt;/li&gt;
    &lt;li&gt;When would a short k-mer size be useful compared to the use of a long k-mer size?&lt;/li&gt;
    &lt;li&gt;How can the concept of k-mer size be related to &lt;code class=&quot;highlighter-rouge&quot;&gt;seed&lt;/code&gt; size in BLAST?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;MEGAhit provided us with a limited number of assembly statistics, and a question that may come to mind is…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Are there other ways to assess the quality of my genome assembly?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is yes, and to generate additional genome assembly metrics, we will use the program below.&lt;/p&gt;

&lt;h2 id=&quot;assembly-quality&quot;&gt;Assembly Quality&lt;/h2&gt;

&lt;h3 id=&quot;quast-quality-assessment-tool-for-genome-assemblies&quot;&gt;QUAST: QUality ASsessment Tool for Genome Assemblies&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Click &lt;a href=&quot;http://quast.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; for more information on QUAST.&lt;/li&gt;
  &lt;li&gt;The paper can be found &lt;a href=&quot;https://academic.oup.com/bioinformatics/article/29/8/1072/228832/QUAST-quality-assessment-tool-for-genome&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ablab/quast&quot; target=&quot;_blank&quot;&gt;QUAST source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To evaluate the quality of your MEGAhit assembly in more detail, descend into the directory containing the megahit output:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;substitute the &lt;code class=&quot;highlighter-rouge&quot;&gt;##&lt;/code&gt; for the numbers you used before in the megahit command.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd megahit_Ecoli_k##
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Next, load the &lt;code class=&quot;highlighter-rouge&quot;&gt;bio&lt;/code&gt; module:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load bio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Recall  that we used the &lt;code class=&quot;highlighter-rouge&quot;&gt;bio&lt;/code&gt; module when we were using BLAST at the command line in Lab 3. Loading this customized farm module will actually add many bioinformatics programs to your &lt;strong&gt;$PATH&lt;/strong&gt; so that you can easily use them in your interactive shell. To check out some of these programs, try typing the following commands after you have loaded the &lt;code class=&quot;highlighter-rouge&quot;&gt;bio&lt;/code&gt; module:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;To view python modules: &lt;code class=&quot;highlighter-rouge&quot;&gt;pip list&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;To view &lt;a href=&quot;https://bioconda.github.io/&quot; target=&quot;_blank&quot;&gt;bioconda&lt;/a&gt; modules: &lt;code class=&quot;highlighter-rouge&quot;&gt;conda list&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, execute the following command to run QUAST on your &lt;em&gt;E. coli&lt;/em&gt; assembly:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;quast.py final.contigs.fa -o quast_output
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;QUAST&lt;/code&gt; on the input file containing the &lt;em&gt;E. coli&lt;/em&gt; TY-2482 assembly contigs from MEGAhit actually generated many files nested within the new directory, &lt;code class=&quot;highlighter-rouge&quot;&gt;quast_output&lt;/code&gt;. Let’s have a look at the report in plain text file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less -S quast_output/report.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should see something very similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;All statistics are based on contigs of size &amp;gt;= 500 bp, unless otherwise noted (e.g., &quot;# contigs (&amp;gt;= 0 bp)&quot; and &quot;Tota

Assembly                    final.contigs
# contigs (&amp;gt;= 0 bp)         719
# contigs (&amp;gt;= 1000 bp)      369
# contigs (&amp;gt;= 5000 bp)      211
# contigs (&amp;gt;= 10000 bp)     151
# contigs (&amp;gt;= 25000 bp)     60
# contigs (&amp;gt;= 50000 bp)     19
Total length (&amp;gt;= 0 bp)      5210009
Total length (&amp;gt;= 1000 bp)   5065636
Total length (&amp;gt;= 5000 bp)   4702255
Total length (&amp;gt;= 10000 bp)  4259183
Total length (&amp;gt;= 25000 bp)  2792051
Total length (&amp;gt;= 50000 bp)  1285159
# contigs                   463
Largest contig              143131
Total length                5130667
GC (%)                      50.49
N50                         30790
N75                         14105
L50                         52
L75                         117
# N's per 100 kbp           0.00

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note that another assembly statistic that is commonly referenced is the &lt;strong&gt;L50&lt;/strong&gt; value, which is defined as the minimum number of contigs whose length sum is equal to the N50 value.**&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;thought-questions-2&quot;&gt;Thought Questions&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Why are there so many contigs?&lt;/li&gt;
    &lt;li&gt;How informative is the N50 value if you are comparing two genome assemblies that are different in total length?&lt;/li&gt;
    &lt;li&gt;What would be needed to produce an assembly with a total number of contigs under, say 10…or perhaps even a &lt;strong&gt;single contig scaffold&lt;/strong&gt;?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Running through this entire process step by step is great for learning how everything works, but what if you need to assemble a large genome that will take a longer amount of time than, say five to ten minutes? A more efficient way to conduct this entire computational analysis is to write a shell script that can be submitted to SLURM with the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; command. Let’s take a look at the example script below:&lt;/p&gt;

&lt;h3 id=&quot;sbatch-script&quot;&gt;sbatch script&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash -l&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#SBATCH -p high&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -D /home/smhigdon/BIT150/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -o /home/smhigdon/BIT150/slurm-log/MEGA_B150-stdout-%j.txt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -e /home/smhigdon/BIT150/slurm-log/MEGA_B150-stderr-%j.txt&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -J MEGA_B150&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -N 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -n 8&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH --mem=16000&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH -t 24:00:00&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH --mail-type=END,FAIL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#SBATCH --mail-user=smhigdon@ucdavis.edu&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Name: megahit_BIT150.sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Created by: Shawn Higdon&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# creation date: April 25, 2017&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# This is a pipeline for the assembly of Illumina PEx50 reads for individual microbial genomes.&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## Load the required software module&lt;/span&gt;

module load bio

&lt;span class=&quot;nv&quot;&gt;OUTPUT_FOLDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;lab_8
mkdir -p &lt;span class=&quot;nv&quot;&gt;$OUTPUT_FOLDER&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Step One: Assemble the preprocessed read files for each sample using MEGAHIT&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;MEGAHIT_FOLDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$OUTPUT_FOLDER&lt;/span&gt;/megahit &lt;span class=&quot;c&quot;&gt;# make a megahit output folder&lt;/span&gt;

megahit -1 &lt;span class=&quot;nv&quot;&gt;$OUTPUT_FOLDER&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;1.fq.gz -2 &lt;span class=&quot;nv&quot;&gt;$OUTPUT_FOLDER&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;2.fq.gz -o &lt;span class=&quot;nv&quot;&gt;$MEGAHIT_FOLDER&lt;/span&gt; -t 8

&lt;span class=&quot;c&quot;&gt;# Step Two: Use Quast to determine the quality of the MEGAHIT assembly&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;QUAST_FOLDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MEGAHIT_FOLDER&lt;/span&gt;/quast

quast.py &lt;span class=&quot;nv&quot;&gt;$MEGAHIT_FOLDER&lt;/span&gt;/final.contigs.fa -o &lt;span class=&quot;nv&quot;&gt;$QUAST_FOLDER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note the addition of the &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; specific lines at the top of the script. Creating a directory called slurm-log at the specified path, and referencing it in the script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-e&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-o&lt;/code&gt; options tells &lt;code class=&quot;highlighter-rouge&quot;&gt;slurm&lt;/code&gt; to generate error and output files, which aid in debugging your scripts. Adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;--mail&lt;/code&gt; options also activates the &lt;code class=&quot;highlighter-rouge&quot;&gt;slurm&lt;/code&gt; feature of mailing the user when the job is complete.&lt;/p&gt;

  &lt;p&gt;Having built in all of these &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; commands, submitting this job is as simple as typing:&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch megahit_BIT150.sh&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lab-8-assignment&quot;&gt;Lab 8 Assignment&lt;/h2&gt;

&lt;p&gt;For the assignment, create a markdown document that addresses the following and submit the document to canvas in &lt;strong&gt;html&lt;/strong&gt; format:&lt;/p&gt;

&lt;h3 id=&quot;part-1&quot;&gt;Part 1&lt;/h3&gt;

&lt;p&gt;Provide a response to each of the &lt;strong&gt;&lt;em&gt;Thought Questions&lt;/em&gt;&lt;/strong&gt; that are presented at the end of each major section in this lab.&lt;/p&gt;

&lt;h3 id=&quot;part-2&quot;&gt;Part 2&lt;/h3&gt;

&lt;p&gt;There are many Bioinformatics programs that have been written to carry out a &lt;strong&gt;&lt;em&gt;Dr Bruijn Graph&lt;/em&gt;&lt;/strong&gt; based de novo assembly using paired-end Illumina reads. Here is a list of some assemblers that are already installed on farm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;http://online.liebertpub.com/doi/abs/10.1089/cmb.2012.0021&quot; target=&quot;_blank&quot;&gt;SPAdes&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://genome.cshlp.org/content/18/5/821.short&quot; target=&quot;_blank&quot;&gt;Velvet&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://link.springer.com/chapter/10.1007%2F978-3-642-12683-3_28&quot; target=&quot;_blank&quot;&gt;IDBA&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;http://genome.cshlp.org/content/19/6/1117.short&quot; target=&quot;_blank&quot;&gt;Abyss&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Choose one of these programs and learn how it works by reading the documentation. Your task is to write an sbatch script that will assemble the same set of paired end reads you used in lab today using an assembler of your choice. Then, use &lt;strong&gt;QUAST&lt;/strong&gt; to assess the assembly metrics of your new assembly.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Compare and contrast the outcome of your new assembly to the results of an assembly that was generated by running MEGAhit on the &lt;em&gt;E. coli&lt;/em&gt; strain TY-2482 paired end reads with the default parameters. This data can be found on farm at the following path: &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Lab_8/megahit_results&lt;/code&gt;. Speculate as to why differences may or may not have occurred for each of the relevant assembly statistics.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Be sure to include the code for your script in the markdown document.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To view the documentation for the assembly programs at the command line, type the following commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spades: &lt;code class=&quot;highlighter-rouge&quot;&gt;spades.py --h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Velvet: &lt;code class=&quot;highlighter-rouge&quot;&gt;velveth&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;IDBA: &lt;code class=&quot;highlighter-rouge&quot;&gt;idba -h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Abyss: &lt;code class=&quot;highlighter-rouge&quot;&gt;man abyss&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Spades, Velvet and Abyss can all be accessed using, &lt;code class=&quot;highlighter-rouge&quot;&gt;module load bio&lt;/code&gt;, which access to IDBA requires, &lt;code class=&quot;highlighter-rouge&quot;&gt;module load idba&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Performing a google search is also a good place to start looking for usage examples.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;project-3.md&quot; target=&quot;_blank&quot;&gt;Project 3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 7 - Genome-wide association study</title>
   <link href="http://localhost:4000/2017/11/09/lab-07/"/>
   <updated>2017-11-09T00:00:00-08:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/11/09/lab-07</id>
   <content type="html">&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Use the GWAS Catalog to find variants associated with specific traits&lt;/li&gt;
  &lt;li&gt;Understand statistics reported in GWAS studies&lt;/li&gt;
  &lt;li&gt;Predict the functional effects of specific allelic variants&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;activity&quot;&gt;Activity&lt;/h1&gt;

&lt;h2 id=&quot;introduction-to-gwas-catalog&quot;&gt;Introduction to GWAS Catalog&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Go to: &lt;a href=&quot;https://www.ebi.ac.uk/gwas/&quot;&gt;GWAS Catalog&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The GWAS Catalog is operated by the National Human Genome Research Institute and the European Bioinformatics Institute. The Catalog is a quality controlled, manually curated, collection of all published genome-wide association studies assaying at least 100,000 SNPs and all SNP-trait associations with p-values &amp;lt; 1.0 x 10&lt;sup&gt;-5&lt;/sup&gt;. In plant there is similar GWAS Catelog in &lt;em&gt;Arabidopsis&lt;/em&gt;&lt;/p&gt;

      &lt;p&gt;ex:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://aragwas.1001genomes.org&quot;&gt;AraGWAS&lt;/a&gt; developed within the &lt;em&gt;Arabidopsis&lt;/em&gt; 1001 Genome project&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Diagram&lt;/strong&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;This diagram shows all SNP-trait associations with p-value ≤ 5.0 × 10&lt;sup&gt;-8&lt;/sup&gt;. You can view the SNP distribution by filtering different types of phenotypes, for example: cardiovascular disease, response to drugs, or you can type any thing in the blank space &lt;strong&gt;Filter by trait&lt;/strong&gt;. After filtering, you can click each colored dots to get more detail information about the significant associations.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Search&lt;/strong&gt;, let’s search &lt;strong&gt;height&lt;/strong&gt; for the analysis.
    &lt;blockquote&gt;
      &lt;p&gt;There are several ways of searching:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Enter a disease name: ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;breast cancer&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;Enter a genome region: ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;6:16000000-25000000&lt;/code&gt;, read as chr:start-stop.&lt;/li&gt;
        &lt;li&gt;Enter a SNP name: ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;rs7329174&lt;/code&gt;.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Become familiar with association information you can get from a search.
    &lt;blockquote&gt;
      &lt;p&gt;Note these features:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;&lt;strong&gt;SNP name&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;RAF&lt;/strong&gt;: Risk/effect allele frequency in controls&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;P-value&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;OR&lt;/strong&gt;: Odds ratio associate with SNP&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Beta&lt;/strong&gt;: Beta coefficient associte with increase or decrease of the SNP&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;CI&lt;/strong&gt;: 95% confidence interval&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Region&lt;/strong&gt;: cytogenetics region of SNP&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Location&lt;/strong&gt;: chr:start-end&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Functional class&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Reported/mapped gene&lt;/strong&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand individual associated SNPs (select SNPs with effectSize &amp;gt;2).
    &lt;blockquote&gt;
      &lt;p&gt;click the &lt;strong&gt;arrow&lt;/strong&gt; right next to the SNP name, it will go to individual SNP association page.
click &lt;strong&gt;Genomic context&lt;/strong&gt;, it is the similar genome browser you learned previous week, play around the different track and see what kind of information you can find.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the SNP effects on gene regulation.
    &lt;blockquote&gt;
      &lt;p&gt;click on &lt;strong&gt;Genes and gene regulation&lt;/strong&gt;, and find the consequence of the transcripts, either a coding transcript or non-coding transcript, does this SNP will lead to non-sense mediate decay (MND)? Which tissue has the biggest effect of this SNP on the gene expression?&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the population genetics of SNPs.
    &lt;blockquote&gt;
      &lt;p&gt;click &lt;strong&gt;Population genetics&lt;/strong&gt; and check the allele frequency in different population, does certain population have high risk for this SNP? Below 1000 Genomes Project Phase 3 allele frequencies there is bar chart for the allele frequency in five major populations (African, American, European, South Asian, East Asian). Below there is more defined populations within these five major populations.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand linkage disequilibrium.
    &lt;blockquote&gt;
      &lt;p&gt;click &lt;strong&gt;Linkage disequilibrium&lt;/strong&gt;, and view the &lt;strong&gt;LD Manhattan plot&lt;/strong&gt; and &lt;strong&gt;LD heatmap plot&lt;/strong&gt; by click &lt;strong&gt;View plot&lt;/strong&gt; of LD plot. Check the heatmap in each population (eg. African, American, European, South Asian).&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand Phylogenetic contexts.
    &lt;blockquote&gt;
      &lt;p&gt;click &lt;strong&gt;Phylogenetic contexts&lt;/strong&gt; and see what is conservation level across different species. click you can choose 8 primate, 21 eutherian mammals, 27 amniota vertebrates, and 53 eutherian mammals.&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Note: Not every species has a sequence alignments, some loci only have sequence alignments in primates.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Understand the global pattern of assocation SNPs in R.
    &lt;blockquote&gt;
      &lt;p&gt;After you search the disease you want to study, click &lt;strong&gt;Download association results&lt;/strong&gt; to download entire association SNPs. Save the file on your desktop.&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;load the library&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(readr)
library(dplyr)
library(ggplot2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;change directory&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setwd('~/Desktop')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;read the file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snps &amp;lt;- read_delim(&quot;~/Desktop/downloads.tsv&quot;, &quot;\t&quot;, escape_double = FALSE, trim_ws = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;check column name&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;colnames(snps)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;identify the SNP with the largest OR or Beta effect size&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;colnames(snps)[31] &amp;lt;- 'effectSize'
biggest_effect_size &amp;lt;- max(snps$effectSize, na.rm = TRUE)
filter(snps, effectSize == biggest_effect_size)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;look at the distribution of OR or Beta effect size&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;histogram(snps$effectSize, na.rm = TRUE, breaks=100)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;identify the SNPs with OR or Beta effect size &amp;gt;2&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter(snps, effectSize &amp;gt; 2)
nrow(filter(snps, effectSize &amp;gt; 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;count the frequncy of SNP context and make barplot&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;counts &amp;lt;- as.data.frame(table(snps$CONTEXT))
colnames(counts)[1] &amp;lt;- 'context'
colnames(counts)[2] &amp;lt;- 'count'
counts &amp;lt;- mutate(counts, frequency = count/sum(counts$count))

ggplot(counts, aes(x=context, y=frequency)) +
  geom_bar(stat=&quot;identity&quot;) +
  xlab(&quot;Context of SNPs&quot;) +
  ylab(&quot;Counts&quot;) +
  theme(axis.text.x=element_text(angle=45,hjust=1,size=10))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;p&gt;Answer the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select one disease you want to study (make sure that disease has at least 50 association SNPs?&lt;/li&gt;
  &lt;li&gt;See the distribution of the SNPs on the genome for certain disease.&lt;/li&gt;
  &lt;li&gt;Familiar with the output of the SNP associations in the GWAS Catalog.&lt;/li&gt;
  &lt;li&gt;What kind of gene regulation consequences in your assocation SNPs?&lt;/li&gt;
  &lt;li&gt;Does LD around the assocation SNPs is different among populations by visualizing LD heatmap?&lt;/li&gt;
  &lt;li&gt;Does certain population has high risk for the disease you study?&lt;/li&gt;
  &lt;li&gt;What is the phylogenetic conservation in the association SNPs?&lt;/li&gt;
  &lt;li&gt;Use R code to select the SNP which has the biggest effect (OR or Beta).&lt;/li&gt;
  &lt;li&gt;What the disease you study what is the distribution of different association SNP context?&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 6 - Genome Browsers</title>
   <link href="http://localhost:4000/2017/11/02/lab-06/"/>
   <updated>2017-11-02T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/11/02/lab-06</id>
   <content type="html">&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Use the UCSC Genome Browser to view genomic features&lt;/li&gt;
  &lt;li&gt;Visualize alternative isoforms at a locus&lt;/li&gt;
  &lt;li&gt;Identify candidate regulator regions around a gene&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;activity&quot;&gt;Activity&lt;/h1&gt;

&lt;h2 id=&quot;introduction-to-the-ucsc-genome-browser&quot;&gt;Introduction to the UCSC Genome Browser&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Go to: &lt;a href=&quot;http://genome.ucsc.edu/&quot;&gt;UCSC Genome Browser&lt;/a&gt;
    &lt;blockquote&gt;
      &lt;p&gt;The UCSC Genome Browser was one of the first to develop a technique for visualizing annotations along a genome. There are specialized genome browsers for many species (mostly vertebrates). The same technology has been duplicated in many other sites:&lt;/p&gt;

      &lt;p&gt;ex:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;http://www.ensembl.org/Homo_sapiens/Gene/Summary?db=core;g=ENSG00000139618;r=13:32315474-32400266&quot;&gt;Ensembl - similar to UCSC&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://gbrowse.arabidopsis.org/cgi-bin/gb2/gbrowse/arabidopsis/?name=Chr1%3A1509103..1510341&quot;&gt;TAIR - Arabidopsis&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Click on &lt;strong&gt;Genome Browser&lt;/strong&gt;
    &lt;blockquote&gt;
      &lt;p&gt;This page lists the genome browsers avaiable. Each species has a separte browser. Within species, there are different &lt;strong&gt;Assembly versions&lt;/strong&gt;. Each assembly has a different &lt;strong&gt;coordinate system&lt;/strong&gt;. There are tools for mapping annotations from one assembly to another (either within or between species).&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Let’s use the Human Assembly &lt;strong&gt;GRCh38/hg38&lt;/strong&gt; (the most recent version). Lets view the locus around the gene &lt;strong&gt;TAZ&lt;/strong&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;There are several ways of navigating to a locus:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Enter a search term in the search bar: ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;TAZ&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;NM_181311&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;Enter a genome region: ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;chrX:154,411,556-154,421,720&lt;/code&gt;, read as chr:start-stop.&lt;/li&gt;
        &lt;li&gt;Search for a specific sequencing using BLAT (similar to BLAST).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Orientation to the default view of the genome browser:
    &lt;blockquote&gt;
      &lt;p&gt;Note these features:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Assembly verion&lt;/li&gt;
        &lt;li&gt;Chromosome coordinates&lt;/li&gt;
        &lt;li&gt;Location of view on chromosome&lt;/li&gt;
        &lt;li&gt;Scale of current view&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Tracks&lt;/strong&gt;: rows of data. Delinited by boxes on the left side.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Features&lt;/strong&gt;: elements fo data inside each track&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;There are too many tracks. Let’s remove some.
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Hover your mouse over the last box. It gets highlighted. Note the title in the middle of the box: &lt;em&gt;Repeating Elements by RepeatMasker&lt;/em&gt;&lt;/li&gt;
        &lt;li&gt;Right-click on the box, and select &lt;strong&gt;Hide&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;Also hide the &lt;strong&gt;Common SNPs(150)&lt;/strong&gt;,&lt;strong&gt;GTEx&lt;/strong&gt;,&lt;strong&gt;OMIM Allelic Variants&lt;/strong&gt;, and &lt;strong&gt;GENCODE v24&lt;/strong&gt; tracks.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Change the format of the H3K27Ac track.
    &lt;blockquote&gt;
      &lt;p&gt;H3K27Ac is a particular form of epigenetic modification that seems to be related to DNA accessibility for transcription factors.&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;The default view shows a layered density plot for H3K27Ac values in 7 cell types. Click on the box on the left. This brings you to the info page for the track. We can specify that we want only the HUVEC cell type. Deselect the others, and click &lt;strong&gt;Submit&lt;/strong&gt;.&lt;/li&gt;
        &lt;li&gt;We could also give a more condensed view of the track by right-clicking and selecting &lt;strong&gt;Dense&lt;/strong&gt;. Explore the other options.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Add a track of &lt;strong&gt;Pfam Domains&lt;/strong&gt;. Pfam is similar to the &lt;strong&gt;Conserved Domain Database&lt;/strong&gt;. We used it earlier with &lt;strong&gt;RPSBLAST&lt;/strong&gt; to find protein domains.
    &lt;blockquote&gt;
      &lt;p&gt;Scroll down to the &lt;strong&gt;Genes and Gene Predictions&lt;/strong&gt; section, find the &lt;strong&gt;Pfam in UCSC Gene&lt;/strong&gt; menu, and select &lt;strong&gt;pack&lt;/strong&gt;. Then click &lt;strong&gt;refresh&lt;/strong&gt;. The track will appear in the display. You can drag it around ti find a better place to display.&lt;/p&gt;

      &lt;p&gt;Note that domains can be split across exons!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Adjust the display to see the neighboring genes
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;You can click and drag to move left and right.&lt;/li&gt;
        &lt;li&gt;You can use the &lt;strong&gt;zoom out&lt;/strong&gt; buttons to expand the view.&lt;/li&gt;
        &lt;li&gt;You can zoom in with the &lt;strong&gt;zoom in&lt;/strong&gt; buttons, or by holding &lt;strong&gt;Alt&lt;/strong&gt; and dragging over a region. If you zoom in enough, it will show you codons, and then even base pairs. To see, you may have to right-click on the left box of the top feature and select &lt;strong&gt;full&lt;/strong&gt;.&lt;/li&gt;
        &lt;li&gt;You can highlight a region by holding &lt;strong&gt;Option&lt;/strong&gt; and dragging over a region.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Export a Genome Browser view as a pdf.
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;When you have a view you like, you can click &lt;strong&gt;View -&amp;gt; PDF/PS&lt;/strong&gt;, and select “Download the current browser graphic in PDF”.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Export data based on regions.
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Add the OMIM Allelic Variants track.&lt;/li&gt;
        &lt;li&gt;Select &lt;strong&gt;Tools -&amp;gt; Data Integrator&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;under &lt;strong&gt;position or search term&lt;/strong&gt;, enter &lt;strong&gt;TAZ&lt;/strong&gt;. If you leave it as is, it will use the current region of the browser&lt;/li&gt;
        &lt;li&gt;Under &lt;strong&gt;Configure Data Sources&lt;/strong&gt;, select &lt;strong&gt;Phenotype&lt;/strong&gt;, then &lt;strong&gt;OMIM Alleles&lt;/strong&gt;, then click Add&lt;/li&gt;
        &lt;li&gt;Click &lt;strong&gt;Get output&lt;/strong&gt;&lt;/li&gt;
        &lt;li&gt;A table will come up with format similar to BED listing the locations of OMIM variants inside the gene.&lt;/li&gt;
        &lt;li&gt;To view information on a particular variant, you can search for the OMIM ID at &lt;a href=&quot;https://www.omim.org&quot;&gt;OMIM&lt;/a&gt;, or: Go back to the Genome Browser view, and click on the variant. This will bring up an info page on the variant, with links back to OMIM.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;p&gt;Answer the following questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;What strand is the TAZ gene on?&lt;/li&gt;
  &lt;li&gt;List the 3 nearest genes upstream (towards the centromere) relative to TAZ&lt;/li&gt;
  &lt;li&gt;Where relative to gene features is the H3K27Ac presence highest?&lt;/li&gt;
  &lt;li&gt;Note the double-lines in the MultiZ alignments of other vertebrate species. What do the double-lines mean? (google, or look in the help pages)&lt;/li&gt;
  &lt;li&gt;Create a figure using the genome browser to highlight one potentially important feature around your gene that may be relevant to its role in disease.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Create a genome browser view for your gene.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;You could show just the gene. You could zoom out to show the neighboring region. You could zoom in on particular features you’d like to highlight.&lt;/li&gt;
    &lt;li&gt;You can show multiple views if that helps describe your finding&lt;/li&gt;
    &lt;li&gt;Include at least two tracks, and refer to both in your description. Remove unnecessary tracks&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 5 - Gene networks and Gene Ontology</title>
   <link href="http://localhost:4000/2017/10/26/lab-05/"/>
   <updated>2017-10-26T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/26/lab-05</id>
   <content type="html">&lt;h1 id=&quot;goals&quot;&gt;Goals&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Use Cytoscape to visualize a network&lt;/li&gt;
  &lt;li&gt;Overlay data onto network topology&lt;/li&gt;
  &lt;li&gt;Analyze a network:
    &lt;ul&gt;
      &lt;li&gt;topology&lt;/li&gt;
      &lt;li&gt;GO enrichment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;to-learn-cytoscape-start-with-the-following-two-tutorials&quot;&gt;To learn Cytoscape, start with the following two tutorials:&lt;/h1&gt;

&lt;h2 id=&quot;tutorial-1-intro-to-cytoscape&quot;&gt;Tutorial 1. Intro to Cytoscape&lt;/h2&gt;

&lt;p&gt;This tutorial will teach you to import a network into Cytoscape, adjust how it is rendered, and to overlay experimental data (in this case gene expression data) onto the nodes of the network.&lt;/p&gt;

&lt;h3 id=&quot;notes&quot;&gt;Notes:&lt;/h3&gt;
&lt;p&gt;One modification - instead of loading the file &lt;code class=&quot;highlighter-rouge&quot;&gt;galFiltered.sif&lt;/code&gt;, load the file &lt;code class=&quot;highlighter-rouge&quot;&gt;galFiltered.csv&lt;/code&gt; from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Z:&lt;/code&gt; drive. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;galExpData.csv&lt;/code&gt; is also on the &lt;code class=&quot;highlighter-rouge&quot;&gt;Z:&lt;/code&gt; drive. Both files are also available on Canvas under &lt;code class=&quot;highlighter-rouge&quot;&gt;Lab_5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://manual.cytoscape.org/en/stable/Basic_Expression_Analysis_Tutorial.html&quot;&gt;Basic Expression Analyis Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;tutorial-2-gene-ontology-enrichment-in-cytoscape&quot;&gt;Tutorial 2. Gene Ontology enrichment in Cytoscape&lt;/h2&gt;

&lt;p&gt;This tutorial will teach you to analyze a gene network for enrichments of gene ontology terms. Enrichments indicate that the set of genes in your network are non-random with respect to gene function. These “enriched” functions are good guesses for the overal importance of the network or pathway.&lt;/p&gt;

&lt;h3 id=&quot;notes-1&quot;&gt;Notes:&lt;/h3&gt;

&lt;p&gt;First, install the BiNGO App in Cytoscape. &lt;code class=&quot;highlighter-rouge&quot;&gt;Apps -&amp;gt; App Manager&lt;/code&gt;. Search for &lt;code class=&quot;highlighter-rouge&quot;&gt;BiNGO&lt;/code&gt;. Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Start the tutorial with a new version of the galFiltered network. Re-import it as you did in the first tutorial into a new network collection.&lt;/p&gt;

&lt;p&gt;Go only through Step 3. You can continue Steps 4+ later if you’d like.&lt;/p&gt;

&lt;p&gt;When you do this for your own gene, be sure to change the organism if needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.psb.ugent.be/cbd/papers/BiNGO/Tutorial.html&quot;&gt;GO Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;gene-identifiers&quot;&gt;Gene Identifiers&lt;/h3&gt;
&lt;p&gt;The BiNGO program tries to map the node IDs to GO terms using the following identifiers:
&lt;img src=&quot;https://www.psb.ugent.be/cbd/papers/BiNGO/User_Guide_files/BiNGO_identifiers_per_organism.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;interpretation-of-bingo-graph-and-results&quot;&gt;Interpretation of BiNGO graph and results&lt;/h3&gt;

&lt;p&gt;BiNGO is aimed at providing the user with a good idea of what functional themes are present in your gene set. The p-values give a good indication about the prominence of a given functional category. However, no biologist would dream of drawing conclusions solely based on p-values, and rightly so ! The p-values returned by BiNGO can give the user additional clues, which should be interpreted in the light of other evidence.&lt;/p&gt;

&lt;p&gt;The BiNGO graph visualizes the GO categories that were found significantly over-represented in the context of the GO hierarchy. The size (area) of the nodes is proportional to the number of genes in the test set which are annotated to that node. The color of the node represents the (corrected) p-value. White nodes are not significantly over-represented, the other ones are, with a color scale ranging from yellow (p-value = significance level, e.g. 0.01) to dark orange (p-value = 5 orders of magnitude smaller than significance level, e.g. 10-5 * 0.01). The color saturates at dark orange for p-values which are more than 5 orders of magnitude smaller than the chosen significance level.&lt;/p&gt;

&lt;p&gt;Due to the interdependency of functional categories in the GO hierarchy, it is very likely that not one category, but a whole branch of the GO hierarchy lights up as being significantly over-represented. In such cases, interpretation can be more difficult. The darkest orange nodes which are furthest down the hierarchy are probably the ones that you’re looking for. Suppose for example that a branch of metabolism categories lights up (see figure).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.psb.ugent.be/cbd/papers/BiNGO/User_Guide.html&quot;&gt;More Backround Reading Here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes-2&quot;&gt;Notes:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;To color the genes with a particular GO category, use the BiNGO output table to &lt;strong&gt;Select nodes&lt;/strong&gt;. Then, in the gene network view, select the Style table, and click the &lt;strong&gt;third box&lt;/strong&gt; in the style row you want to use (ex. &lt;strong&gt;Fill Color&lt;/strong&gt;), and select a style. This box allows you to &lt;strong&gt;Bypass&lt;/strong&gt; the normal attribute scheme just for the selected nodes.&lt;/li&gt;
  &lt;li&gt;To get a table of the BiNGO results, in the BiNGO window, click the box &lt;strong&gt;Check Box for saving Data&lt;/strong&gt;. This saves a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bgo&lt;/code&gt; file. This file can be opened in a text editor. You can copy the table from this file and paste it into Excel. From excel, you can then subset the columns you want.&lt;/li&gt;
  &lt;li&gt;To use a table in Markdown, use this website: &lt;a href=&quot;http://www.tablesgenerator.com/markdown_tables&quot;&gt;Tables Generator&lt;/a&gt;. It lets you paste in table data copied from Excel, and formats the table for Markdown.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-networks&quot;&gt;Other networks&lt;/h2&gt;

&lt;p&gt;There are other ways to import networks into Cytoscape.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Download a edge file from a PPIN database like String or PSICQUIC.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;File -&amp;gt; Import -&amp;gt; Public Databases...&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;`Universal Interaction Database Client. This is PSICQuIC&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WikiPathways&lt;/code&gt; a collection of community annotated networks and pathways.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get the KEGGParser app from the app store. &lt;code class=&quot;highlighter-rouge&quot;&gt;Apps -&amp;gt; KEGGParser -&amp;gt; Load KGML -&amp;gt; KEGG web load task&lt;/code&gt;. You need to know the KEGG pathway ID first. Then you enter it here and it will download the network.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use any of these networks for any of the tasks we described here.&lt;/p&gt;

&lt;h1 id=&quot;assignment&quot;&gt;Assignment&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Create a network model for your gene for Project 2
    &lt;ul&gt;
      &lt;li&gt;Options: String netowrk, PSICQUIC network (can access from inside Cytoscape), WikiPathways network (can access from inside Cytoscape), or KEGG pathway (requires KEGGParser app inside Cytoscape)&lt;/li&gt;
      &lt;li&gt;Import Network into Cytoscape&lt;/li&gt;
      &lt;li&gt;Create a network view that shows the features of the network	- Identify over-represented gene functions within the network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create a Markdown document including:
    &lt;ul&gt;
      &lt;li&gt;an image of the network&lt;/li&gt;
      &lt;li&gt;A table of enriched GO terms&lt;/li&gt;
      &lt;li&gt;A description of what you can learn from the network&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 4 - Gene interaction data and intro to R</title>
   <link href="http://localhost:4000/2017/10/19/lab-04/"/>
   <updated>2017-10-19T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/19/lab-04</id>
   <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;In this lab, we will learn to work with &lt;strong&gt;table data&lt;/strong&gt;. We’ll use data from online databases, and view,
arrange, and analyze the data using the programing language &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;. The data that we’ll focus on
is data on gene interactions, and data on gene annotations. Our goal is to develop techniques to 
test the hypothesis:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The genes that cause a disease function in the same networks or pathways&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;step-1-gene-interaction-data&quot;&gt;Step 1: Gene interaction data&lt;/h2&gt;

&lt;p&gt;In class, we discussed the &lt;a href=&quot;http://www.ebi.ac.uk/Tools/webservices/psicquic/view&quot;&gt;PSICQUIC&lt;/a&gt; federated database, a system for querying many autonomous
databases of gene interactions through one unified client. PSICQUIC is very powerful. However, its
output is difficult to process because the results from the different databases don’t all have the same
format.&lt;/p&gt;

&lt;p&gt;Instead, in Lab today, we’ll use just one of these autonomous databases called &lt;a href=&quot;https://string-db.org/&quot;&gt;STRING&lt;/a&gt;.
String is a relatively recent database that has many nice features.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Start by going to the STRING website and doing a query for genes that interact with BRCA1 in humans.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Take a few minutes to explore the results.
    &lt;blockquote&gt;
      &lt;p&gt;Questions:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;What information does STRING provide about each gene (ie Node)?&lt;/li&gt;
        &lt;li&gt;What information does STRING provide about each interaction (ie Edge)?&lt;/li&gt;
        &lt;li&gt;Why are 10 genes shown? Find a setting that controls how large the set of genes and interactions is.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Click the &lt;strong&gt;Exports&lt;/strong&gt; button. You’ll see the interaction data in table format. We want to download this data so that we can process it. Click the &lt;strong&gt;download&lt;/strong&gt; button for &lt;code class=&quot;highlighter-rouge&quot;&gt;... as simple tabular text output&lt;/code&gt;. Save the file on your desktop as &lt;code class=&quot;highlighter-rouge&quot;&gt;BRCA1_String.tsv&lt;/code&gt;. Open the file with &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad++&lt;/code&gt;.
    &lt;blockquote&gt;
      &lt;p&gt;Note:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;In a text editor, a &lt;code class=&quot;highlighter-rouge&quot;&gt;tsv&lt;/code&gt; file looks fairly ordered, but is still hard to read. The file would look pretty much like this if you used &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; to view the file in BASH.&lt;/li&gt;
        &lt;li&gt;The main thing to notice here is what separates the &lt;code class=&quot;highlighter-rouge&quot;&gt;fields&lt;/code&gt; (or columns). In this file it is just &lt;code class=&quot;highlighter-rouge&quot;&gt;whitespace&lt;/code&gt;. In a &lt;code class=&quot;highlighter-rouge&quot;&gt;csv&lt;/code&gt; file, there would be a comma (&lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;) separating each field. In a &lt;code class=&quot;highlighter-rouge&quot;&gt;tsv&lt;/code&gt; file, it’s actually the &lt;code class=&quot;highlighter-rouge&quot;&gt;TAB&lt;/code&gt; character (not a space). This is important because then programs that read this file can tell the difference between a &lt;strong&gt;value&lt;/strong&gt; with multiple words (“Gene 3”), and two values in different fields (“Gene” “3”).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;If you haven’t worked with &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; before, you would probably open this file in &lt;code class=&quot;highlighter-rouge&quot;&gt;Excel&lt;/code&gt;. Go ahead an do this. &lt;code class=&quot;highlighter-rouge&quot;&gt;Excel&lt;/code&gt; understands the &lt;code class=&quot;highlighter-rouge&quot;&gt;tsv&lt;/code&gt; format, and correctly separates the data into columns.
    &lt;blockquote&gt;
      &lt;p&gt;Question:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;In Excel, can you sort the interactions by their experimental evidence? What is the strongest-supported interaction in this list?&lt;/li&gt;
        &lt;li&gt;In Excel, can you find all interactions that involve BRCA1 itself? How many are there?&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;Note:&lt;/p&gt;

      &lt;ul&gt;
        &lt;li&gt;Excel is relatively easy to use. However, it can cause lots of problems in Bioinformatics! One common problem is that Excel tries to be &lt;strong&gt;too smart&lt;/strong&gt;.&lt;/li&gt;
        &lt;li&gt;Try adding a new entry for an interaction between BRCA1 and SEPT2. What happens? What problems would this cause?&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-2-intro-to-r&quot;&gt;Step 2. Intro to R.&lt;/h2&gt;

&lt;p&gt;Instead, let’s load this same data table into &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, open &lt;code class=&quot;highlighter-rouge&quot;&gt;RStudio&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Rstudio&lt;/code&gt; is like an operating system designed for working in &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;. The RStudio program has its own Terminal (called &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt;), a File Explorer (called &lt;code class=&quot;highlighter-rouge&quot;&gt;Files&lt;/code&gt;), and a text editor.&lt;/p&gt;

&lt;p&gt;To use &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, we enter commands in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt;. This is very much like entering commands in &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt; - just the language is different.&lt;/p&gt;

&lt;p&gt;First, we want to change the directory of our &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; session to our computer’s desktop where our file is. In &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, the command is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;setwd('~/Desktop')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This accomplishes the same thing as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{bash}&quot;&gt;cd ~/Desktop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in Bash.&lt;/p&gt;

&lt;p&gt;We can see the files in the current directory by typing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;list.files()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This accomplishes the same thing as:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{bash}&quot;&gt;ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In Bash, the format of a command was:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;command [arguments] [&amp;gt; output_file]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we don’t give an &lt;code class=&quot;highlighter-rouge&quot;&gt;output_file&lt;/code&gt;, Bash writes the output to the screen. 
But we can &lt;strong&gt;capture&lt;/strong&gt; the output in a file to store it and use it later.&lt;/p&gt;

&lt;p&gt;In R, we refer to &lt;code class=&quot;highlighter-rouge&quot;&gt;functions&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt;s or &lt;code class=&quot;highlighter-rouge&quot;&gt;program&lt;/code&gt;s. The general format is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;output &amp;lt;- function(argument1,argument2,...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just like Bash, if we don’t include &lt;code class=&quot;highlighter-rouge&quot;&gt;output &amp;lt;-&lt;/code&gt;, R will print the output of the function to the screen.
But if you do, it will capture the output in the &lt;strong&gt;variable&lt;/strong&gt; output. 
The language is different, but the idea is really the same! 
The main difference here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;output_file&lt;/code&gt; in Bash is a file on your hard-drive. It’s permanent. 
But &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; is just held in memory. When you close &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; disappears! 
This is both good and bad. Good, because memory is MUCH faster than the hard-drive. Bad, because you have 
to save your work in some way more permanent.&lt;/p&gt;

&lt;h3 id=&quot;scripts&quot;&gt;Scripts&lt;/h3&gt;
&lt;p&gt;Just like in Bash, we can write scripts in R to record the commands that we would type into the &lt;code class=&quot;highlighter-rouge&quot;&gt;Console&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;RStudio gives us a text editor to do this. But it has a nice feature:&lt;/p&gt;

&lt;p&gt;Make a new &lt;code class=&quot;highlighter-rouge&quot;&gt;R Script&lt;/code&gt;. Then type this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;x &amp;lt;- 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, put your cursor on the line and type &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+Enter&lt;/code&gt;. RStudio sends the command to the console and runs it!
No more copy + paste!&lt;/p&gt;

&lt;p&gt;You can also run a whole script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Source&lt;/code&gt; button in RStudio, or with the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source('my_file.R`)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;R Scripts use comments just like Bash scripts. Just use the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; character at the start of the line.&lt;/p&gt;

&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;

&lt;p&gt;Remember that on Farm, we had to type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load bio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to tell Bash to prepare the BLAST programs for us to use?&lt;/p&gt;

&lt;p&gt;R is the same, but instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt;, R uses &lt;code class=&quot;highlighter-rouge&quot;&gt;packages&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;libraries&lt;/code&gt;. For today’s work, we need to load two packages:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(dplyr) # for working with tables
library(biomaRt) # for downloading data from BioMart
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you get an error message for either library, you’ll have to install these packages:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;install.packages('tidyr')
source(&quot;https://bioconductor.org/biocLite.R&quot;)
biocLite(&quot;biomaRt&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;loading-data&quot;&gt;Loading data&lt;/h3&gt;
&lt;p&gt;Since R works with variables instead of files, we have to load data before we can use it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brca1_data &amp;lt;- read.delim(file='BRCA1_String.tsv',header=TRUE,stringsAsFactors = FALSE)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note in R Studio how as you type this line, it starts making suggestions for you. Enhanced auto-complete!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;What is the function? What are the arguments?&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nothing happens when we run this function, because we captured the output in the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;brca1_data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do we view this variable? In Unix, we used &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;In R, we can:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Just type the variable name and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;. This prints all (or most) to the screen&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;View(brca1_data)&lt;/code&gt;. RStudio’s spreadsheet viewer.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head(brca1_data)&lt;/code&gt;. The first 6 lines&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;glimpse(brca1_data)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Things to note:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Observations&lt;/code&gt; are entries = rows.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Variables&lt;/code&gt; are features = columns.&lt;/li&gt;
  &lt;li&gt;Each column has a particular data type. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;chr&amp;gt;&lt;/code&gt; is &lt;strong&gt;character&lt;/strong&gt;, meaning text. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dbl&amp;gt;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;int&amp;gt;&lt;/code&gt; are numbers. It’s important to check that this was imported correctly.&lt;/li&gt;
  &lt;li&gt;The name of the first column didn’t import well (it starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;X.&lt;/code&gt;?) We can change it like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;colnames(brca1_data)               # gets all the names of the columns
colnames(brca1_data)[1]            # gets only the first column name
colnames(brca1_data)[1] &amp;lt;- 'node1' # assigns the first column name a new value
colnames(brca1_data)               # check that it changed!
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;accessing-data&quot;&gt;Accessing data&lt;/h3&gt;

&lt;p&gt;We can access a row (a particular interaction) like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;slice(brca1_data,1) # row 1
slice(brca1_data,10) # row 10
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The arguments are: (1) Name of table variable, (2) row number to select&lt;/p&gt;

&lt;p&gt;We can &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt; the rows like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;filter(brca1_data,node1 == 'BRCA1')
filter(brca1_data,experimentally_determined_interaction &amp;gt; 0.5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The arguments are: (1) Name of table variable, (2) filter criteria.&lt;/p&gt;

&lt;p&gt;We can access a column (a feature) like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brca1_data$combined_score # get data from combined_score column
select(brca1_data,combined_score,node1) # select two columns
select(brca1_data,1:3) # select first three columns
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Each of these print the whole result to the screen. How would you print only the first 6 lines? The first 10?&lt;/p&gt;

  &lt;p&gt;Hint: You can view all possible arguments to a function by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;?head&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can sort the data like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arrange(brca1_data,experimentally_determined_interaction)  # increasing values
arrange(brca1_data,desc(experimentally_determined_interaction)) # increasing values
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can make a new row like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;new_interaction &amp;lt;- data_frame(node1='SEPT2', node2='MARCH1')
bind_rows(brca1_data,new_interaction)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It worked, but it filled in &lt;code class=&quot;highlighter-rouge&quot;&gt;NA&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;NA&amp;gt;&lt;/code&gt; for all the other columns because we didn’t provide data for those.&lt;/p&gt;

&lt;h3 id=&quot;saving-tables&quot;&gt;Saving tables&lt;/h3&gt;

&lt;p&gt;Once we’ve processed data, we have to save it to a new file, or it will be lost when we close R.&lt;/p&gt;

&lt;p&gt;To save a table as a new &lt;code class=&quot;highlighter-rouge&quot;&gt;.tsv&lt;/code&gt; file, do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;write.table(brca1_data,file = 'processed_BRCA1_interactions.tsv',row.names=FALSE,sep='\t')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Activity:&lt;/p&gt;

  &lt;p&gt;Select only interactions that include BRCA1, have experimentally_determined_interaction &amp;gt; 0.5,
and make a new table including only &lt;code class=&quot;highlighter-rouge&quot;&gt;node1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;node2&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;experimentally_determined_interaction&lt;/code&gt; as columns. Save this as a file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;data-integration&quot;&gt;Data integration&lt;/h2&gt;

&lt;p&gt;No that we’ve seen how to do basic data table processing in R, let’s use these skills for some real bioinformatics.&lt;/p&gt;

&lt;p&gt;The BRCA1 is known for its role in Breast Cancer.&lt;/p&gt;

&lt;p&gt;Remember our original hypothesis:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The genes that cause a disease function in the same networks or pathways&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Today, I’d like to try to address a related, but simpler hypothesis:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Genes that interact with each other cause similar diseases&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Question:&lt;/p&gt;

  &lt;p&gt;We now have a data table listing genes that interact. What do we need to test this hypothesis? Where could we get the data?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;querying-biomart-from-r&quot;&gt;Querying BioMart from R&lt;/h2&gt;

&lt;p&gt;The Ensembl BioMart of Human Genes has an &lt;strong&gt;attribute&lt;/strong&gt; imported from the OMIM database describing diseases associated with each gene.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href=&quot;http://www.ensembl.org/biomart/martview&quot;&gt;BioMart&lt;/a&gt;, and do a query for the BRCA1 human gene, and get its MIM disease annotations.&lt;/p&gt;

&lt;p&gt;We want to do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Get a list of all the genes in our data that interact directly with BRCA1&lt;/li&gt;
  &lt;li&gt;Run a BioMart query for all of these genes, extracting all their MIM disease annotations&lt;/li&gt;
  &lt;li&gt;Test if any sets of genes cause the same diseases&lt;/li&gt;
  &lt;li&gt;Select interactions that may be important for specific diseases&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;list-genes-that-interact-with-brca1&quot;&gt;List genes that interact with BRCA1&lt;/h3&gt;

&lt;p&gt;We can get this information from &lt;code class=&quot;highlighter-rouge&quot;&gt;brca1_data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Filter interactions where node1 or node2 is BRCA1&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brca1_interactions &amp;lt;- filter(brca1_data,node1=='BRCA1' | node2 == 'BRCA1')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Extract the node1 genes and the node2 genes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: These are &lt;strong&gt;exchangeable&lt;/strong&gt;. There’s no direction of interaction information here&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node1_genes &amp;lt;- brca1_interactions$node1  # we want the data
node2_genes &amp;lt;- brca1_interactions$node2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Combine these into one list&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;all_genes &amp;lt;- c(node1_genes,node2_genes)  # the function `c` appends two lists together
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Find only the unique genes&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;unique_genes &amp;lt;- unique(all_genes)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;set-up-a-biomart-query&quot;&gt;Set up a biomart query&lt;/h3&gt;

&lt;p&gt;Load the &lt;code class=&quot;highlighter-rouge&quot;&gt;biomaRt&lt;/code&gt; package if you haven’t:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;library(biomaRt)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are several steps to this. They follow very closely to what you do on the website.&lt;/p&gt;

&lt;h3 id=&quot;find-available-marts-ie-data-warehouses&quot;&gt;Find available marts (ie data warehouses)&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listMarts(host = 'www.ensembl.org')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We want the &lt;code class=&quot;highlighter-rouge&quot;&gt;ensembl Genes 90&lt;/code&gt; Mart.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: There are other sites with other Marts.&lt;/p&gt;

  &lt;p&gt;ex. “plants.ensembl.org” for plant biomarts&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Select it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ensembl &amp;lt;- useMart('ENSEMBL_MART_ENSEMBL')
ensembl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;ensembl&lt;/code&gt; holds information about the connection between R and Ensembl&lt;/p&gt;

&lt;h3 id=&quot;select-a-dataset&quot;&gt;Select a dataset&lt;/h3&gt;

&lt;p&gt;To view available datasets, do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listDatasets(ensembl)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Find the one we want (&lt;code class=&quot;highlighter-rouge&quot;&gt;hsapiens_gene_ensembl&lt;/code&gt;), and select it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ensembl_human &amp;lt;- useDataset('hsapiens_gene_ensembl',mart = ensembl)
ensembl_human
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;select-filters-and-attributes-for-the-query&quot;&gt;Select filters and attributes for the query&lt;/h3&gt;

&lt;p&gt;To find available filters, do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listFilters(ensembl_human)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our gene names are HUGO names (a standardized human-readable gene name). The filter is: &lt;code class=&quot;highlighter-rouge&quot;&gt;hgnc_symbol&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To find available attributes, do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listAttributes(ensembl_human)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We want our results to include both the HUGO ID and the MIM diseases: &lt;code class=&quot;highlighter-rouge&quot;&gt;mim_morbid_description&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;run-the-query&quot;&gt;Run the query&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mim_results &amp;lt;- getBM(mart = ensembl_human,
                     attributes = c('hgnc_symbol','mim_morbid_description'), # note how we make a list with the `c()` function
                     filters = c('hgnc_symbol'),
                     values = unique_genes # When we run, R will expand our the variable `unique_genes`, just like BASH did.
                     )
View(mim_results)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Questions:&lt;/p&gt;

  &lt;p&gt;Did all genes get annotations? Were all genes identified in Ensembl?
Does each gene have a single disease annotation?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;process-results&quot;&gt;Process results&lt;/h3&gt;

&lt;p&gt;Now, we want to address the question: do any genes in this set relate to the same disease?&lt;/p&gt;

&lt;p&gt;For this, we’ll use one of the most powerful tools in R for processing data: The &lt;strong&gt;split-apply-combine&lt;/strong&gt; approach.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Split the data into different groups by rows&lt;/li&gt;
  &lt;li&gt;Apply a function separately to each group&lt;/li&gt;
  &lt;li&gt;Combine the results back into a new table&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, we will do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Split the annotation data by disease&lt;/li&gt;
  &lt;li&gt;For each disease, collect all genes associated&lt;/li&gt;
  &lt;li&gt;Combine into a table, one row for each disease, with all associated genes listed, plus a count of how many genes per disease&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;split-the-annotation-data-by-disease&quot;&gt;Split the annotation data by disease&lt;/h4&gt;

&lt;p&gt;To split the data, we tell R how we want it split:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mim_results &amp;lt;- group_by(mim_results,mim_morbid_description)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;apply-a-function-separately-to-each-group-combine-the-results&quot;&gt;Apply a function separately to each group, combine the results&lt;/h4&gt;

&lt;p&gt;We want to apply two functions to each group:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n()&lt;/code&gt;: count how many rows (ie genes)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;toString()&lt;/code&gt;: paste all gene names together into a single string (ie long word or sentence)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We use the &lt;code class=&quot;highlighter-rouge&quot;&gt;summarize&lt;/code&gt; function:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mim_summary &amp;lt;- summarize(mim_results,
                          num_genes = n(),
                          gene_list = toString(hgnc_symbol))
View(mim_summary)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;sort-the-results-to-answer-the-question&quot;&gt;Sort the results to answer the question:&lt;/h4&gt;
&lt;p&gt;You can also do this in the SpreadSheet view directly&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arrange(mim_summary,desc(num_genes))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Questions:&lt;/p&gt;

  &lt;p&gt;What diseases are associated with multiple genes in this set?
Are there any &lt;strong&gt;interactions&lt;/strong&gt; that where both genes cause the same disease? How would you address this question?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To see how the &lt;strong&gt;split-apply-combine&lt;/strong&gt; is working in more detail, think of it like a for loop (yes, we can use them in R too!)&lt;/p&gt;

&lt;p&gt;Make an empty table to hold results&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;summary_table &amp;lt;- data_frame() 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Get a list of the diseases:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;disease_list &amp;lt;- unique(mim_results$mim_morbid_description)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Write a for loop. It works just like the one in Bash! But the syntax is a bit different.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for(disease in disease_list){  

   # select the subset of the rows for the current disease
  disease_results &amp;lt;- filter(mim_results,mim_morbid_description == disease) 
  
   # count the number of rows in the table for the current disease
  n &amp;lt;- nrow(disease_results)    

   # paste together all the gene names
  gene_list &amp;lt;- toString(disease_results$hgnc_symbol)    

	# make a small table to hold this disease's results
  disease_table &amp;lt;- data_frame(disease = disease, n = n, gene_list = gene_list) 
  
   # append this disease's results to the full table
  summary_table &amp;lt;- bind_rows(summary_table,disease_table)    

}
View(summary_table)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;save-the-results-in-a-tsv-file&quot;&gt;Save the results in a &lt;code class=&quot;highlighter-rouge&quot;&gt;.tsv&lt;/code&gt; file:&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;write.table(mim_summary,file = 'BRCA1_interactors_diseases.tsv',row.names=FALSE,sep='\t')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;summary-1&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Here is some more background&lt;/p&gt;

&lt;h3 id=&quot;what-is-r&quot;&gt;What is &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;R is a programing language. It’s primary purpose is for statistical analyses. 
But it’s also very useful for general data science work, including Bioinformatics. 
R is &lt;strong&gt;Open Source&lt;/strong&gt;, meaning that anyone can write programs in &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, and share them for free.
Because of this, there are &lt;strong&gt;packages&lt;/strong&gt; in R for almost any Bioinformatics task you will want to do.&lt;/p&gt;

&lt;p&gt;For our purposes here, the main advantages of processing data tables in R vs Excel are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can write scripts to automate tasks&lt;/li&gt;
  &lt;li&gt;Scripts serve as documentation, or a lab notebook of what we did&lt;/li&gt;
  &lt;li&gt;R doesn’t do anything that you don’t tell it to do (unlike Excel).&lt;/li&gt;
  &lt;li&gt;R can process datafiles that are too large for Excel.&lt;/li&gt;
  &lt;li&gt;R can connect directly to online databases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are basically the same reasons why we use Bash and Unix rather than Windows for Bioinformatics!&lt;/p&gt;

&lt;h3 id=&quot;r-resources&quot;&gt;R resources:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf&quot;&gt;Data Wrangling Cheat Sheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.datacarpentry.org/R-genomics/01-intro-to-R.html&quot;&gt;Intro to R tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;p&gt;Repeat the activity we did here with your gene for Project 2.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Take your gene. Use String, or another database if you’d like to download interacting genes.&lt;/li&gt;
  &lt;li&gt;Import the data into R, and use R to get a list of all unique genes.&lt;/li&gt;
  &lt;li&gt;Use BioMart to download some attribute of the genes (MIM, GO annotation, Reactome reacting, KEGG pathway), 
and ask if multiple of the interacting genes have similar roles.&lt;/li&gt;
  &lt;li&gt;Prepare a brief report in markdown of what you found.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Going forward, consider analyses like this for Project 2 itself!&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Project 2 - building a genetic model of a trait</title>
   <link href="http://localhost:4000/2017/10/17/project-2/"/>
   <updated>2017-10-17T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/17/project-2</id>
   <content type="html">&lt;h2 id=&quot;project-2---building-a-genetic-model-of-a-trait&quot;&gt;Project 2 - building a genetic model of a trait&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Define model&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The objective of this project is to draw together multiple sources of information to build a model, or hypothesis, about the cause of a disease or other trait. I want you to go beyond the explanations for why a particular gene causes a trait that you find in databases like &lt;strong&gt;OMIM&lt;/strong&gt;, or &lt;strong&gt;GeneCards&lt;/strong&gt;. Consider the following hypotheses:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The genes that cause a disease function in the same networks or pathways&lt;/li&gt;
  &lt;li&gt;Genes with similar functions cause similar diseases&lt;/li&gt;
  &lt;li&gt;The most important mutations occur in particular regions of a genome (genes, exons, promoters)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I want you to explore these hypotheses with respect to a specific trait or disease. Can you find evidence that supports each of these hypotheses? If so, can you use these ideas to guide your genetic model? If not, why not? What does that suggest about your trait?&lt;/p&gt;

&lt;p&gt;For this project, please work in teams of 2.&lt;/p&gt;

&lt;p&gt;First, choose a gene associated with a trait. You can use the same trait you used in Project 1 if you’d like. Again, you will have the most success if you choose a trait in a model system (Human, mouse, or Arabidopsis).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://docs.google.com/spreadsheets/d/1Tdm3W4fI42nl6Ha9YmtxxoREfwVDhhaxaXBd6jQhM8Q/edit?usp=sharing&quot;&gt;Enter your gene and trait here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once you have chosen your trait, begin by outlining how you could test each of the hypotheses. What information do you need to begin?&lt;/p&gt;

&lt;p&gt;Over the next several weeks, we will cover several bioinformatics tools that can be used to address these questions. As we learn a tool, apply it to your trait, and collect the results. At the end, synthesis your results as much as you can into a genetic model for your trait.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Due&lt;/strong&gt;: 11/14/17&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 3 - HPC and Command Line BLAST</title>
   <link href="http://localhost:4000/2017/10/12/lab-03/"/>
   <updated>2017-10-12T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/12/lab-03</id>
   <content type="html">&lt;h1 id=&quot;outline&quot;&gt;Outline:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;review of for loops&lt;/li&gt;
  &lt;li&gt;Intro to using a computer cluster&lt;/li&gt;
  &lt;li&gt;Running BLAST from the command line&lt;/li&gt;
  &lt;li&gt;Running more complex BLAST jobs&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;review-of-loops&quot;&gt;Review of loops&lt;/h1&gt;
&lt;p&gt;In the homework, I asked you to write a script to process all pairs of files through the &lt;code class=&quot;highlighter-rouge&quot;&gt;goodiff&lt;/code&gt; program. This requires &lt;strong&gt;nested for loops&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start in the &lt;code class=&quot;highlighter-rouge&quot;&gt;north-pacific-gyre/2012-07-03&lt;/code&gt; data files folder.&lt;/p&gt;

&lt;p&gt;We can see all the files we want to process with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls *.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note: some of you may have other &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; files in this folder. If you do, modify the above command to only list the data files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To process all pairs of files, we want to create two variables to hold the names of the two files to process: &lt;code class=&quot;highlighter-rouge&quot;&gt;file1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;file2&lt;/code&gt;. Then we want to use &lt;strong&gt;for loops&lt;/strong&gt; to substitute each possible pair of files for these two variables.&lt;/p&gt;

&lt;p&gt;First, lets start by processing the first file against all others. You could use a script like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;file1=NENE01729A.txt
for file2 in NE*.txt
do
 echo Processing $file1 $file2
 programs/goodiff $file1 $file2 &amp;gt;&amp;gt; output/goodiff_results.txt
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;No, we want to run this whole script again and again, but each time with a different &lt;code class=&quot;highlighter-rouge&quot;&gt;file1&lt;/code&gt;. We can do this by writing a loop for file1, where the &lt;strong&gt;body&lt;/strong&gt; of the loop is this first loop:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for file1 in NE*.txt
do
  echo $file1
  for file2 in NE*.txt
  do
   echo Processing $file1 $file2
   programs/goodiff $file1 $file2 &amp;gt;&amp;gt; output/goodiff_results.txt
  done
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s it!&lt;/p&gt;

&lt;h1 id=&quot;intro-to-high-performance-computing&quot;&gt;Intro to High Performance Computing&lt;/h1&gt;

&lt;h3 id=&quot;key-ideas&quot;&gt;Key ideas:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The Farm cluster is a &lt;strong&gt;shared resource&lt;/strong&gt;. It is important to follow some rules so that you do not interfere with other users.&lt;/li&gt;
  &lt;li&gt;The Farm cluster has a head node and then a bunch of compute nodes
    &lt;ul&gt;
      &lt;li&gt;You log in from your computer to the head node, and then ask for time on a compute node.&lt;/li&gt;
      &lt;li&gt;You have to move files from your computer to the cluster. Once there, the whole file system is shared among all nodes. You don’t need to keep copying files&lt;/li&gt;
      &lt;li&gt;The cluster runs Linux (clone of Unix). You control it using Bash&lt;/li&gt;
      &lt;li&gt;There are lots of programs installed, and different versions of many programs. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt; to select which programs you want to use. It takes care of the rest.&lt;/li&gt;
      &lt;li&gt;You can log in to Farm from anywhere as long as you have your username / password. This will be given to you (it’s not your Kerberos login).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;log-in&quot;&gt;Log in:&lt;/h3&gt;
&lt;p&gt;To log in, from a Unix terminal type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh username@farm.cse.ucdavis.edu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter your password. You will arrive at your personal &lt;strong&gt;home directory&lt;/strong&gt;, which will be: &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username&lt;/code&gt;. Only you can write / modify files in this directory.&lt;/p&gt;

&lt;h3 id=&quot;directories&quot;&gt;Directories:&lt;/h3&gt;
&lt;p&gt;There is a class directory called: &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150&lt;/code&gt;. You can access these files, but they are locked - you cannot change them. If you want to share files with the class, you can put them in: &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Share&lt;/code&gt;. Change to each of these directories (using &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;), and view their contents (using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;moving-files-on-and-off&quot;&gt;Moving files on and off:&lt;/h3&gt;
&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;FileZilla&lt;/code&gt; program. This program sets up a secure connection to the Farm file server and lets you move files on and off of the cluster. It works a lot like &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows File Explorer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select new site, enter: Host: &lt;code class=&quot;highlighter-rouge&quot;&gt;farm.cse.ucdavis.edu&lt;/code&gt;, Port: &lt;code class=&quot;highlighter-rouge&quot;&gt;2022&lt;/code&gt;, Protocol: &lt;code class=&quot;highlighter-rouge&quot;&gt;SFTP&lt;/code&gt;, Logon Type: “Normal”, User: &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, Password: &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Connect&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the left is a file explorer for your computer. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Z:/Classes/BIT150/Lab_3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the right is a file explorer for Farm’s file system. Create a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;Lab_3&lt;/code&gt;. You can also do this in the terminal (&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir Lab_3&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Find the file: &lt;code class=&quot;highlighter-rouge&quot;&gt;brca1.fasta&lt;/code&gt;, and drag it onto Farm.&lt;/li&gt;
  &lt;li&gt;In the terminal, enter the command: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo Some Text &amp;gt; new_file.txt&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;FileZilla&lt;/code&gt;, refresh the Farm file explorer. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file.txt&lt;/code&gt; should appear. Double-click, or drag it to your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;running-blast&quot;&gt;Running BLAST&lt;/h2&gt;

&lt;p&gt;The BLAST programs are installed on Farm. They are fairly intensive programs, requiring a moderate amount of RAM, and sometimes a lot of time to run.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We do not want to run BLAST on the head node!&lt;/strong&gt; This could bog-down this computer and prevent others on the cluster from doing their work!&lt;/p&gt;

&lt;p&gt;First, request an allocation on one of the compute nodes:&lt;/p&gt;

&lt;h3 id=&quot;requesting-an-interactive-job&quot;&gt;Requesting an interactive job&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;srun -p bit150 -t 20 --pty bash -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srun&lt;/code&gt; is a command that asks for an allocation&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p bit150&lt;/code&gt; asks to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;bit150&lt;/code&gt; partition. This means use the resources assigned to our class&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-t 20&lt;/code&gt; asks for 20 minutes. After this time, your allocation will shut down&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--pty bash -l&lt;/code&gt; asks for the allocation to run &lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt; just as if you opened a new terminal&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hit &lt;code class=&quot;highlighter-rouge&quot;&gt;Enter&lt;/code&gt;, and then wait a minute. Eventually you will see some messages saying you are logged in to a job.&lt;/p&gt;

&lt;p&gt;To see info on your job, type:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;squeue -u username
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;the-blast-program&quot;&gt;The blast program&lt;/h3&gt;

&lt;p&gt;Now that we have access to a powerful computer, we can use BLAST to search a database for our sequence.&lt;/p&gt;

&lt;p&gt;Our sequence is in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;brca1.fasta&lt;/code&gt;, the file we moved to Farm. View the file with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head brca1.fasta
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;question-is-this-a-nucleotide-of-protein-sequence&quot;&gt;Question: Is this a nucleotide of protein sequence?&lt;/h4&gt;

&lt;h3 id=&quot;the-fasta-format&quot;&gt;The FASTA format&lt;/h3&gt;

&lt;p&gt;The FASTA	format is a common format for storing sequence files. Each sequence has a header (&lt;strong&gt;the metadata&lt;/strong&gt;), and then the sequence. The header is the first line, and begins with the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; character. The rest of the line contains various annotations (a very compressed version of the GenBank format). Longer sequences are split over multiple lines. But the line breaks are irrelevant. Programs like BLAST know to keep reading the sequence until the end of the file.&lt;/p&gt;

&lt;p&gt;Multiple sequences can be held in the same file. They are separated by header lines.&lt;/p&gt;

&lt;p&gt;First, we have to load the module with the blast program. The bio module includes many bioinformatics programs. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module load bio
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can run blast. A run looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blastp -db /group/BIT150/blast_databases/refseq_human_protein -query brca1.fasta -out brca1_blast.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blastp&lt;/code&gt; is the program for protein-protein blast.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;db /group/BIT150/blast_databases/refseq_human_protein&lt;/code&gt; specifies the blast database that we want to use. We select the &lt;code class=&quot;highlighter-rouge&quot;&gt;refseq_human_protein &lt;/code&gt; database in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/blast_databases/&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;query brca1.fasta&lt;/code&gt; specifies the query sequence&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;out brca1_blast.txt &lt;/code&gt; specifes we want the output stored in the file called &lt;code class=&quot;highlighter-rouge&quot;&gt;brca1_blast.txt &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the file. It’s long. A good viewer is &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. Or, you can download it to your computer using &lt;code class=&quot;highlighter-rouge&quot;&gt;FileZilla&lt;/code&gt;, and view it in &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad++&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s modify the command. We can change the output style into a concise table. Rather than re-typing, use the up-arrow to get find the command. &lt;strong&gt;Note:&lt;/strong&gt; or, you could use &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;. Now, instead of moving the cursor with the arrow keys, copy it to a Notepad++ document, and edit it there.&lt;/p&gt;

&lt;p&gt;For clarity, it’s often nice to break up long commands into several lines. You can do this by putting a &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; character at the end of each line.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;blastp  \
   -db /group/BIT150/blast_databases/refseq_human_protein \
   -query brca1.fasta \
   -out brca1_blast_table.txt \
   -outfmt 7   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I added the option &lt;code class=&quot;highlighter-rouge&quot;&gt;-outfmt 6&lt;/code&gt;. This changes the format of the output to a table. See &lt;code class=&quot;highlighter-rouge&quot;&gt;blastp -help&lt;/code&gt; for more formatting options.&lt;/p&gt;

&lt;p&gt;You can copy this whole set of code and paste into the terminal. Now, look at this output file using &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When you’re done, exit the compute node by typing:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Always remember to exit when you’re done - this frees up resources for others!&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;notes&quot;&gt;Notes:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;There are many more options for the &lt;code class=&quot;highlighter-rouge&quot;&gt;blastp&lt;/code&gt; program. You can view them with &lt;code class=&quot;highlighter-rouge&quot;&gt;blastp -help&lt;/code&gt;, or &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/books/NBK279675/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There are many databases that you could blast against. You can also create your own starting with a file of fasta sequences using the &lt;code class=&quot;highlighter-rouge&quot;&gt;makeblastdb&lt;/code&gt; command. &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/books/NBK279688/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You can extract sequences from a database with the &lt;code class=&quot;highlighter-rouge&quot;&gt;blastdbcmd&lt;/code&gt; program &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/books/NBK279689/&quot;&gt;Link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;running-longer-jobs-with-sbatch&quot;&gt;Running longer jobs with sbatch&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;srun&lt;/code&gt; command is useful for testing commands and shorter programs. But it has limitations for longer or more intensive jobs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sometimes it takes a long time to get an allocation. With &lt;code class=&quot;highlighter-rouge&quot;&gt;srun&lt;/code&gt; you have to wait.&lt;/li&gt;
  &lt;li&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;srun&lt;/code&gt;, you have to wait until your program is done and then remember to log out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The preferred way to run computation on a cluster like Farm is by submitting jobs that run &lt;strong&gt;non-interactively&lt;/strong&gt; using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Launching a &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; job looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sbatch -p bit150 -t 30 my_script.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will tell the cluster to find a time to allocate resources to my job for 30 minutes, and then run the script &lt;code class=&quot;highlighter-rouge&quot;&gt;my_script.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The key to using &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; is writing a good script. The body of the script is the set of commands you would type in to Bash if you were there to control it. But you start the script with some special commands to tell the cluster how to run your job.&lt;/p&gt;

&lt;p&gt;The simplest script looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

module load bio

blastp  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -db /group/BIT150/blast_databases/refseq_human_protein &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -query brca1.fasta &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -out brca1_blast_table.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -outfmt 7    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The first line tells the cluster to run this script with the &lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt; shell.&lt;/li&gt;
  &lt;li&gt;The second tells it to load the bio module&lt;/li&gt;
  &lt;li&gt;Then we give the command for running blast.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can then modify this script to do longer, more intensive jobs:&lt;/p&gt;

&lt;p&gt;The following script does a blast using a query file that includes 10 different sequences:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

module load bio

blastp  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -db /group/BIT150/blast_databases/refseq_human_protein &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -query /group/BIT150/Lab_3/mouse_protein_set1.fasta &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -out mouse_protein_set1_blast_table.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -outfmt 7    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;modular-scripts&quot;&gt;Modular scripts&lt;/h2&gt;
&lt;p&gt;The above script is fine, but it is a bit hard to read, and is also hard to modify. Say you wanted to blast a different gene against a different database? How would you change the script?&lt;/p&gt;

&lt;p&gt;The way to write cleaner scripts is to use bash variables. We saw variables earlier when writing for loops. The concept here is the same. We can assign a &lt;strong&gt;value&lt;/strong&gt; to a &lt;strong&gt;variable&lt;/strong&gt; in the top of the script, and then use the variable later:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

module load bio

&lt;span class=&quot;c&quot;&gt;# declare database and query files&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/group/BIT150/blast_databases/refseq_human_protein
&lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/group/BIT150/Lab_3/mouse_protein_set1.fasta
&lt;span class=&quot;nv&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mouse_protein_set1_blast_table.txt

blastp  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -db &lt;span class=&quot;nv&quot;&gt;$database&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -query &lt;span class=&quot;nv&quot;&gt;$query&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -out mouse_protein_set1_blast_table.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -outfmt 7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the call to &lt;code class=&quot;highlighter-rouge&quot;&gt;blastp&lt;/code&gt; is much clearer. It’s also often helpful to separate directories from file names, and base names from file extensions. A better script might look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

module load bio

&lt;span class=&quot;c&quot;&gt;# declare database directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;database_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/group/BIT150/blast_databases/

&lt;span class=&quot;c&quot;&gt;# declare input file directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;query_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/group/BIT150/Lab_3

&lt;span class=&quot;c&quot;&gt;# declare output file directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;output_dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.

&lt;span class=&quot;c&quot;&gt;# database&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;database&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;refseq_human_protein

&lt;span class=&quot;c&quot;&gt;# query&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mouse_protein_set1

blastp  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -db &lt;span class=&quot;nv&quot;&gt;$database_dir&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$database&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -query &lt;span class=&quot;nv&quot;&gt;$query_dir&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.fasta &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -out &lt;span class=&quot;nv&quot;&gt;$output_dir&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;_blast_table.txt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
   -outfmt 7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;activities&quot;&gt;Activities&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Modify the above script to blast the &lt;code class=&quot;highlighter-rouge&quot;&gt;mouse_protein_set1.fasta&lt;/code&gt; file against three of these databases:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;refseq_human_protein
refseq_mouse_protein
refseq_zebrafish_protein
refseq_plant_protein
swissprot
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Modifying the above script, write a &lt;strong&gt;for loop&lt;/strong&gt; to blast each of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Lab_3/individual_genes&lt;/code&gt; against one of the protein databases, saving each in it’s own file in an output directory of your home directory?&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;notes-1&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;When submitting &lt;code class=&quot;highlighter-rouge&quot;&gt;sbatch&lt;/code&gt; jobs, two important commands are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;squeue -p bit150&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;squeue -u bit150-01&lt;/code&gt;. These show you if your job is running&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scancel -u bit150-01&lt;/code&gt;. This cancels all your running jobs. You can also do: &lt;code class=&quot;highlighter-rouge&quot;&gt;scancel 15968444&lt;/code&gt; to cancel a specific job numer&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;homework&quot;&gt;Homework:&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Find the amino acid sequence of your gene&lt;/li&gt;
  &lt;li&gt;Choose three of the blast databases on Farm. Here is a list:
    &lt;blockquote&gt;

      &lt;table&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th&gt;Database&lt;/th&gt;
            &lt;th&gt;Type&lt;/th&gt;
            &lt;th&gt;program&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;refseq_human_protein&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Protein&lt;/td&gt;
            &lt;td&gt;blastp&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;refseq_mouse_protein&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Protein&lt;/td&gt;
            &lt;td&gt;blastp&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;refseq_zebrafish_protein&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Protein&lt;/td&gt;
            &lt;td&gt;blastp&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;refseq_plant_protein&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Protein&lt;/td&gt;
            &lt;td&gt;blastp&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;swissprot&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Protein&lt;/td&gt;
            &lt;td&gt;blastp&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cdd_NCBI&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Domains&lt;/td&gt;
            &lt;td&gt;rpsblast&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pfam&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Domains&lt;/td&gt;
            &lt;td&gt;rpsblast&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Smart&lt;/code&gt;&lt;/td&gt;
            &lt;td&gt;Domains&lt;/td&gt;
            &lt;td&gt;rpsblast&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write a script to BLAST your sequence against these three databases. Note that the last three are databases of protein domains. These require the &lt;code class=&quot;highlighter-rouge&quot;&gt;rpsblast&lt;/code&gt; program instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;blastp&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Now, go to NCBI’s blast server and run the same searches there. Compare the results.&lt;/li&gt;
  &lt;li&gt;Write a Markdown document describing what you learned about your gene. Include your script from step 3.&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>.bash_profile and the shell ENVIRONMENT</title>
   <link href="http://localhost:4000/2017/10/05/bash_profile/"/>
   <updated>2017-10-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/05/bash_profile</id>
   <content type="html">&lt;h1 id=&quot;what-is-a-bash_profile&quot;&gt;What is a .bash_profile?&lt;/h1&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; is a plain text file that is sourced by the login shell when opening a new terminal window.
Another file that can be sourced is the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; file.
For more information on the difference between these two, see &lt;a href=&quot;https://apple.stackexchange.com/questions/51036/what-is-the-difference-between-bash-profile-and-bashrc&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. These files are hidden in the home (&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;) directory, which is achieved by placing a &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; at the beginning of the file name. To view all hidden files within a directory, type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -a&lt;/code&gt;. This will reveal hidden files. If your home directory does not have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; already, create one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ touch ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These files are used to customize the environment of your bash terminal. When opening a new login shell window, the terminal shell program will look in the home directory for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; file, read the file line by line, interpret the commands and apply them to the terminal shell’s environment. &lt;strong&gt;Each bash terminal window environment is independent from those of other windows&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;alias&quot;&gt;Alias&lt;/h2&gt;
&lt;p&gt;A common type of environmental modification to store within the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;. An &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; is used to modify the default behavior of a linux command, such as &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;. Incorporating an alias into your .bash_profile file could be done like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias rm='rm -i'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Setting up this alias in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; will setup your terminal application to spawn a bash environment where typing &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; at the command-line is equivalent to typing &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -i&lt;/code&gt;, every time you open a new terminal window.&lt;/p&gt;

&lt;h2 id=&quot;path&quot;&gt;Path&lt;/h2&gt;
&lt;p&gt;A second factor to consider for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; is appending directories to your shell environments &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable. To see what your environment variable is set to by default, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The directories returned in the terminal window are all places that the bash shell will search for binary files that are used to invoke programs within the environment. When the installation of a new piece of software is desired, one that you wish to run from the command line, the directory in which the files are stored must be communicated to the bash interpreter. This is done by adding the target path to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;. Here is an example of how to append a directory to your environment path:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=$PATH:$HOME/BIT150/scripts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another way to achieve the same thing is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=&quot;~/BIT150/scripts:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding one of the lines above to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; will tell &lt;strong&gt;bash&lt;/strong&gt; to look in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/BIT150/scripts&lt;/code&gt; for executable files that match the command specified at the command line prompt. These can be &lt;strong&gt;shell scripts&lt;/strong&gt;, &lt;strong&gt;python scripts&lt;/strong&gt;, &lt;strong&gt;R scripts&lt;/strong&gt;, &lt;strong&gt;perl scripts&lt;/strong&gt;, etc.&lt;/p&gt;

&lt;h2 id=&quot;comment-lines&quot;&gt;Comment Lines&lt;/h2&gt;

&lt;p&gt;As discussed in &lt;a href=&quot;/BIT150_website/2017/10/05/lab-02/&quot; target=&quot;_blank&quot;&gt;Lab2&lt;/a&gt;, adding comments to files that are interpreted by the shell is extremely important. This allows you to communicate to your future self, as well as others who may view the file you create. Comments may be added in the line above lines of code that are intended to be read by the shell, as well as on the same line that the code is being written on:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Aliases

alias rm='rm -i' # this is an alias to make the rm command safer.

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;example-of-a-simple-bash_profile-file&quot;&gt;Example of a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; file&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
###############################
#                             #
# .bash_profile for bit150-01 #
#                             #
###############################

# Welcome and Date

MYDATE=`date &quot;+%H:%M:%S %m/%d/%y&quot;`
echo &quot;Welcome $USER, the current time is $MYDATE&quot;

# ENVIRONMENT ALIASES

alias ls='ls -p' # show which items are directories by default

alias rm='rm -i' # make remove command safer by adding -i option

# ENVIRONMENT PATH

# add the BIT150/scripts directory to the ENVIRONMENT PATH
export PATH=&quot;/Users/smhigdon/BIT150/scripts:$PATH&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Once your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile &lt;/code&gt; has been created in the home directory, you need to tell your active shell to read it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All new shell windows that you spawn after saving this file into the home directory will source the .bash_profile - or each time you login to farm.&lt;/p&gt;

&lt;h3 id=&quot;making-a-file-executable&quot;&gt;Making a file executable&lt;/h3&gt;
&lt;p&gt;To make a script file you have stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/BIT150/scripts&lt;/code&gt; executable, use the following strategy:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod u+x &amp;lt;path to script file&amp;gt;

e.g.

chmod u+x ~/BIT150/scripts/my-first-script.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To verify that the file has been made executable, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smhigdon$ ls -l ~/BIT150/scripts/my-first-script.sh


-rwxr--r--  1 smhigdon  staff  0 Oct  5 18:09 BIT150/scripts/my-first-script.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The x indiates that the file is now executable.&lt;/p&gt;

&lt;p&gt;Now, with the .bash_profile created and the script file made executable, you should be able to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;my-first-script.sh&lt;/code&gt; program from any directory because the shell searches the scripts location for any executable file.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 2 - Bash automation</title>
   <link href="http://localhost:4000/2017/10/05/lab-02/"/>
   <updated>2017-10-05T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/05/lab-02</id>
   <content type="html">&lt;h1 id=&quot;outline&quot;&gt;Outline:&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Automation in Unix&lt;/li&gt;
  &lt;li&gt;Intro to using a computer cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;projects&quot;&gt;Projects&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;After the tutorials today, there will hopefully be time to work on your database projects. The projects are due next Thursday in Lecture. In lecture, you will each be expected to give a short (3-5 minute) presentation of your database to your group. We’ll then collect and summarize the range of databases you explore as a class.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;unix-tutorial&quot;&gt;Unix tutorial&lt;/h1&gt;

&lt;p&gt;In Lab 1, we covered commands to move around the Unix file system. These included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;: List the current working directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;: Change to a new directory&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;: list files, folders, and programs&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt;: view the help page for a program&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also covered the basic structure of a unix command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command -argument input_file &amp;gt; output_file&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These commands are summarized in the file: &lt;a href=&quot;/BIT150_website/2017/09/27/unix_commands/&quot;&gt;Unix commands cheatsheat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we will continue this tutorial. We will focus on how to automate actions in Unix. This includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;wild cards&lt;/li&gt;
  &lt;li&gt;scripts&lt;/li&gt;
  &lt;li&gt;for loops&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also cover some other useful commands including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;refresher-activity&quot;&gt;Refresher activity&lt;/h2&gt;

&lt;p&gt;Open the data-shell directory in &lt;code class=&quot;highlighter-rouge&quot;&gt;Git BASH&lt;/code&gt;. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -F
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There is a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;Desktop&lt;/code&gt;. Inside it is a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;. Somewhere inside that folder is a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;youfoundit.txt&lt;/code&gt;. Find the file. Once you’ve found it, enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat youfoundit.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The command &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; takes as input a file name, and simply reads the file and prints its output to the screen.&lt;/p&gt;

&lt;h2 id=&quot;automation-1&quot;&gt;Automation-1&lt;/h2&gt;

&lt;p&gt;Now, we’ll return to processing Nelle’s data files using the &lt;code class=&quot;highlighter-rouge&quot;&gt;goostats&lt;/code&gt; program.&lt;/p&gt;

&lt;p&gt;Return to the &lt;code class=&quot;highlighter-rouge&quot;&gt;data_shell&lt;/code&gt; directory, and then go to the &lt;code class=&quot;highlighter-rouge&quot;&gt;north-pacific-gyre/2012-07-03&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Remember, the command to process a file looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;programs/goostat NENE01729A.txt &amp;gt; output_NENE01729A.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Process the first three files: &lt;code class=&quot;highlighter-rouge&quot;&gt;NENE01729A.txt&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NENE01729B.txt&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;NENE02040A.txt&lt;/code&gt;. Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;up-arrow&lt;/code&gt; to repeat the previous command, and then the arrow keys to modify it. You can open the folder in Windows File-Explorer to see the output files. Or type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -F&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;cleaning-up-our-mess&quot;&gt;Cleaning up our mess&lt;/h3&gt;

&lt;p&gt;Note that with these output files, our data directory is getting messy. It would be nicer to have the raw data files in one folder and the output files in another folder.&lt;/p&gt;

&lt;p&gt;Let’s make an output folder, and move our output files there. On Windows, you could create a new directory. In BASH, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir output
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On Windows, you could select each file and drag it to the folder. In BASH, type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv output_NENE01729A.txt output/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can also re-name files with the &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv output/output_NENE01729B.txt output/renamed_file.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We didn’t have to move to the &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; directory to do this renaming. We just gave the relative path to the file.&lt;/p&gt;

&lt;h4 id=&quot;wildcards&quot;&gt;Wildcards&lt;/h4&gt;

&lt;p&gt;Remember, BASH is all about automation. We don’t have to type the &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command for each file separately. We can use a wild-card to select all the output files at once:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv output* output/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character matches any set of character. Before running the &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command, BASH first expands &lt;code class=&quot;highlighter-rouge&quot;&gt;output*&lt;/code&gt; to all files that start with &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt;, and then contain 0 or more additional characters. It then passes them all to mv command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt; There’s no &lt;code class=&quot;highlighter-rouge&quot;&gt;UNDO&lt;/code&gt; in BASH! It’s always a good idea to test out a BASH command like this before you run it. Before running a command, you can use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; to print out exactly what BASH is going to do:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;mv output* output/&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Be sure to put the command in quotes.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; is similar to &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;, except for commands instead of files. &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; prints the contents of the file to the screen. &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; prints the command itself to the screen.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;Some text&quot;
echo &quot;output*&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You don’t always need the quotes, but it’s a good habid.&lt;/p&gt;

&lt;p&gt;Wildcards work with many commands. Try it with &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -F NENE*
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;activity&quot;&gt;Activity:&lt;/h3&gt;
&lt;p&gt;Find all files that have the character &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; in them. How many are there?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before continuing, all output files should be in the output folder.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;automation-2&quot;&gt;Automation-2&lt;/h2&gt;

&lt;p&gt;Wildcards are one way to automate. Scripts are another.&lt;/p&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;goostat&lt;/code&gt; again, but this time write directly into the &lt;code class=&quot;highlighter-rouge&quot;&gt;output&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Remember the command? You can find it by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;Notepad++&lt;/code&gt;. Copy the comand, paste it there&lt;/li&gt;
  &lt;li&gt;Paste it several times&lt;/li&gt;
  &lt;li&gt;Replace the file name with the others in the directory.&lt;/li&gt;
  &lt;li&gt;Copy it all, paste it in terminal.&lt;/li&gt;
  &lt;li&gt;Is this easier? No. &lt;strong&gt;But it’s documented!&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Alternatively, save it as &lt;code class=&quot;highlighter-rouge&quot;&gt;process_goostats.sh&lt;/code&gt;. &lt;strong&gt;Be sure to change character encoding to Unix&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Run with &lt;code class=&quot;highlighter-rouge&quot;&gt;bash process_goostats.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;for-loops&quot;&gt;For-loops&lt;/h3&gt;

&lt;p&gt;But, we can tell Bash to automate the creation of each of these lines.&lt;/p&gt;

&lt;p&gt;Computers are great a repetitive tasks like this. They do it faster, with fewer mistakes.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;for loop&lt;/strong&gt; is a tool for repeating the same action several times with a different input each time.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for file in *.txt
do
  programs/goostat $file &amp;gt; output/output_$file
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The loop has several parts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for file in *.txt&lt;/code&gt;: This declares the loop and the input for each iteration.
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.txt&lt;/code&gt; gives a list of files. We can view the list with &lt;code class=&quot;highlighter-rouge&quot;&gt;echo *.txt&lt;/code&gt;. Lists in Bash are separate by spaces&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; is a &lt;strong&gt;variable&lt;/strong&gt;. What the loop will do is it will take the name of the first file from the list, and assign it to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;. It will then run the lines between &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;. Once those lines are done, it will assign the next file name to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;do/done&lt;/code&gt; block, we can refer to the actual file name by typing &lt;code class=&quot;highlighter-rouge&quot;&gt;$file&lt;/code&gt;, or better &lt;code class=&quot;highlighter-rouge&quot;&gt;${file}&lt;/code&gt;. When bash sees &lt;code class=&quot;highlighter-rouge&quot;&gt;$file&lt;/code&gt;, it replaces it with the file name stored in the variable.&lt;/li&gt;
      &lt;li&gt;Do: &lt;code class=&quot;highlighter-rouge&quot;&gt;file=NENE01729A.txt&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $file&lt;/code&gt;. Try &lt;code class=&quot;highlighter-rouge&quot;&gt;echo file&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Now, do: &lt;code class=&quot;highlighter-rouge&quot;&gt;file=some_other_file.txt&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $file&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Before we run the script, let’s test it. Replace the line &lt;code class=&quot;highlighter-rouge&quot;&gt;program...&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;echo &quot;program...&quot;&lt;/code&gt;. Then copy the lines and paste into the terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This just wrote out exactly what we were trying to do by hand!&lt;/strong&gt; We could copy these lines. We could copy these lines into a new script, and then run it with &lt;code class=&quot;highlighter-rouge&quot;&gt;bash process_all.sh&lt;/code&gt;. But, instead, if we just remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, and run the loop, it will send these lines directly to the Bash engine and execute them!&lt;/p&gt;

&lt;p&gt;Do this, then run the script with &lt;code class=&quot;highlighter-rouge&quot;&gt;bash process_goostats.sh&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;make-a-nicer-script&quot;&gt;Make a nicer script.&lt;/h3&gt;

&lt;p&gt;Scripts are both a tool for automation, and also a tool for documentation. If you write your scripts well, they both save you time now, and also help when you come back later and want to do the same or similar actions again, or when you have to write up your methods.&lt;/p&gt;

&lt;p&gt;We can do several things to make this script nicer.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add comments. You can write lines in your script that begin with the hash character &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;. Bash will ignore these lines:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# echo some text
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;We can add a line that tells us what the computer is currently doing:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &quot;Currently processing file $file&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;activity-1&quot;&gt;Activity:&lt;/h3&gt;

&lt;p&gt;Write a script to process all pairs of files using the program &lt;code class=&quot;highlighter-rouge&quot;&gt;goodiff&lt;/code&gt;. Concatenate the output into one file that looks like:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;file1&lt;/td&gt;
      &lt;td&gt;file2&lt;/td&gt;
      &lt;td&gt;score&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;file1&lt;/td&gt;
      &lt;td&gt;file3&lt;/td&gt;
      &lt;td&gt;score&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;file2&lt;/td&gt;
      &lt;td&gt;file3&lt;/td&gt;
      &lt;td&gt;score&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Hints:&lt;/p&gt;

&lt;p&gt;Everything that shows up on the screen can be written instead to a file. Try and compare these lines:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# using echo
echo &quot;my text&quot;
echo &quot;my text&quot; &amp;gt; my_file.txt

# using cat
cat my_file.txt
cat my_file.txt &amp;gt; new_file.txt
cat new_file.txt
cat my_file.txt &amp;gt;&amp;gt; new_file.txt
cat new_file.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A single “&amp;gt;” says: “create a new file with this name and capture the output into this file”.&lt;/li&gt;
  &lt;li&gt;Two “»” says: “append the output to the end of the existing file (and create a new file if needed)”&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;things-to-remember&quot;&gt;Things to remember:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Bash identifies separate arguments to commands by spaces. This means that spaces in file names cause problems
    &lt;ul&gt;
      &lt;li&gt;This is why you should enclose commands in quotation marks &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt;. Things in quotation marks are interpreted as being part of the same argument&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;In Notepad++, create a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;My File.txt&lt;/code&gt;. Put some text in it.&lt;/li&gt;
  &lt;li&gt;In Bash, type: &lt;code class=&quot;highlighter-rouge&quot;&gt;cat My File.txt&lt;/code&gt;. You get an error&lt;/li&gt;
  &lt;li&gt;Try: &lt;code class=&quot;highlighter-rouge&quot;&gt;cat &quot;My File.txt&quot;&lt;/code&gt;. It works!&lt;/li&gt;
  &lt;li&gt;Try: &lt;code class=&quot;highlighter-rouge&quot;&gt;file=&quot;My File.txt&quot;&lt;/code&gt;, and then &lt;code class=&quot;highlighter-rouge&quot;&gt;cat $file&lt;/code&gt;. You get an error.&lt;/li&gt;
  &lt;li&gt;Try &lt;code class=&quot;highlighter-rouge&quot;&gt;cat &quot;$file&quot;&lt;/code&gt;. It works!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Other helpful commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wc file&lt;/code&gt; Counts the number of lines, words, and characters in a file&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head file&lt;/code&gt; Prints the first 10 lines of a file. You can change the number with the &lt;code class=&quot;highlighter-rouge&quot;&gt;-n 3&lt;/code&gt; option (replacing 3 with the number you want.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tail file&lt;/code&gt; Prints the last 10 lines of a file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;less file&lt;/code&gt; Gives an interactive view of the file. You can page-down using space or the arrow keys. To exit, type &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; command uses &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; to show the help file for each command.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;intro-to-high-performance-computing&quot;&gt;Intro to High Performance Computing&lt;/h1&gt;

&lt;h3 id=&quot;key-ideas&quot;&gt;Key ideas:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The Farm cluster is a &lt;strong&gt;shared resource&lt;/strong&gt;. It is important to follow some rules so that you do not interfere with other users.&lt;/li&gt;
  &lt;li&gt;The Farm cluster has a head node and then a bunch of compute nodes
    &lt;ul&gt;
      &lt;li&gt;You log in from your computer to the head node, and then ask for time on a compute node.&lt;/li&gt;
      &lt;li&gt;You have to move files from your computer to the cluster. Once there, the whole file system is shared among all nodes. You don’t need to keep copying files&lt;/li&gt;
      &lt;li&gt;The cluster runs Linux (clone of Unix). You control it using Bash&lt;/li&gt;
      &lt;li&gt;There are lots of programs installed, and different versions of many programs. Use &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt; to select which programs you want to use. It takes care of the rest.&lt;/li&gt;
      &lt;li&gt;You can log in to Farm from anywhere as long as you have your username / password. This will be given to you (it’s not your Kerberos login).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;log-in&quot;&gt;Log in:&lt;/h3&gt;
&lt;p&gt;To log in, from a Unix terminal type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh username@farm.cse.ucdavis.edu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter your password. You will arrive at your personal &lt;strong&gt;home directory&lt;/strong&gt;, which will be: &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username&lt;/code&gt;. Only you can write / modify files in this directory.&lt;/p&gt;

&lt;h3 id=&quot;directories&quot;&gt;Directories:&lt;/h3&gt;
&lt;p&gt;There is a class directory called: &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150&lt;/code&gt;. You can access these files, but they are locked - you cannot change them. If you want to share files with the class, you can put them in: &lt;code class=&quot;highlighter-rouge&quot;&gt;/group/BIT150/Share&lt;/code&gt;. Change to each of these directories (using &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;), and view their contents (using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;moving-files-on-and-off&quot;&gt;Moving files on and off:&lt;/h3&gt;
&lt;p&gt;Open the &lt;code class=&quot;highlighter-rouge&quot;&gt;FileZilla&lt;/code&gt; program. This program sets up a secure connection to the Farm file server and lets you move files on and off of the cluster. It works a lot like &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows File Explorer&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To use:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select new site, enter: Host: &lt;code class=&quot;highlighter-rouge&quot;&gt;farm.cse.ucdavis.edu&lt;/code&gt;, Port: &lt;code class=&quot;highlighter-rouge&quot;&gt;2022&lt;/code&gt;, Protocol: &lt;code class=&quot;highlighter-rouge&quot;&gt;SFTP&lt;/code&gt;, Logon Type: “Normal”, User: &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;, Password: &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Connect&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the left is a file explorer for your computer. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Z:/Classes/BIT150/Lab_2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;On the right is a file explorer for Farm’s file system. Create a directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;Lab_2&lt;/code&gt;. You can also do this in the terminal (&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir Lab_2&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Find the file: &lt;code class=&quot;highlighter-rouge&quot;&gt;brac1.fasta&lt;/code&gt;, and drag it onto Farm.&lt;/li&gt;
  &lt;li&gt;In the terminal, enter the command: &lt;code class=&quot;highlighter-rouge&quot;&gt;echo Some Text &amp;gt; new_file.txt&lt;/code&gt;. In &lt;code class=&quot;highlighter-rouge&quot;&gt;FileZilla&lt;/code&gt;, refresh the Farm file explorer. The file &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file.txt&lt;/code&gt; should appear. Double-click, or drag it to your computer.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Working on your PC</title>
   <link href="http://localhost:4000/2017/10/02/unix-on-windows/"/>
   <updated>2017-10-02T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/02/unix-on-windows</id>
   <content type="html">&lt;h1 id=&quot;bash-on-windows-10&quot;&gt;BASH on Windows 10&lt;/h1&gt;

&lt;p&gt;If your personal computer (PC) operates using Windows 10, you should be able to install a windows application onto your system that allows the user to access and navigate the file system using an Ubuntu flavor of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bash_(Unix_shell)&quot; target=&quot;_blank&quot;&gt;BASH&lt;/a&gt;. The procedure for outfitting your Windows 10 computer to operate with Ubuntu BASH terminal windows has been well documented in the following tutorial: &lt;a href=&quot;https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/&quot; target=&quot;_blank&quot;&gt;Install BASH for WINDOWS 10&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;git-bash&quot;&gt;Git BASH&lt;/h1&gt;

&lt;p&gt;Because the Ubuntu Bash on Windows 10 is in its early &lt;strong&gt;beta&lt;/strong&gt; release version, we will not be using this tool in the labs this year. During the lab sections of the course we will be using &lt;strong&gt;Git BASH&lt;/strong&gt;. If you would like to have consistency across the computer you use in lab and your personal computer, download and install &lt;em&gt;Git for Windows&lt;/em&gt;, available at &lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot;&gt;https://git-for-windows.github.io/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;macintosh-users&quot;&gt;Macintosh Users&lt;/h3&gt;

&lt;p&gt;If you use a macintosh computer, the operating system is built on top of a unix frame. Mac OS X has a terminal application pre-installed. If you have never used the temrinal application on your macintsosh computer before, you can find it using &lt;strong&gt;spotlight&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;command + spacebar&lt;/code&gt; and type in ‘terminal’. Alternatively, you can navigate to launching the application using &lt;strong&gt;FINDER&lt;/strong&gt; (Applications &amp;gt; Utilities &amp;gt; Terminal):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/terminal.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;other-useful-programs-for-mac&quot;&gt;Other Useful Programs for Mac&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;If customization is your thing, try out an alternative terminal emulator: &lt;a href=&quot;https://www.iterm2.com/downloads.html&quot; target=&quot;_blank&quot;&gt;iterm2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Popular Text Editors for Mac OS X:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.sublimetext.com/3&quot; target=&quot;_blank&quot;&gt;Sublime&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.barebones.com/products/textwrangler/download.html&quot; target=&quot;_blank&quot;&gt;TextWrangler/BBEdit&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot;&gt;Atom&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;using-bash-with-caution&quot;&gt;Using BASH with Caution&lt;/h2&gt;

&lt;p&gt;If you have never used a unix-based operating system, or have limited experience, there are certain precautions that should be taken when navigating and manipulating files at the BASH command-line. Most importantly, &lt;strong&gt;when a file is removed&lt;/strong&gt; from the system using the &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command, the &lt;strong&gt;file is gone forever!&lt;/strong&gt; It does not go to a &lt;strong&gt;“Recycle Bin”&lt;/strong&gt; or &lt;strong&gt;“Trash”&lt;/strong&gt; Directory/Folder.&lt;/p&gt;

&lt;p&gt;Because of this, removing files within the BASH shell should be done with certainty. We recommend reading over &lt;a href=&quot;https://www.howtogeek.com/125157/8-deadly-commands-you-should-never-run-on-linux/&quot; target=&quot;_blank&quot;&gt;8 Deadly Commands You Should Never Run on Linux&lt;/a&gt; in order to familiarize yourself with hazardous commands that will likely prove to be detrimental to your file system, should you run them.&lt;/p&gt;

&lt;p&gt;Perhaps the most significant stress point regarding using BASH with caution is to be careful when using the wildcard character, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, in conjunction with commands - namely the &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;For example, you should never run: &lt;code class=&quot;highlighter-rouge&quot;&gt;rm /*&lt;/code&gt; if you have Administrative access on the file system, commonly referred to as &lt;a href=&quot;https://en.wikipedia.org/wiki/Sudo&quot;&gt;SUDO&lt;/a&gt; permission in the unix world.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/sudo.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;a href=&quot;https://www.pinterest.com/pin/370421138070787705/&quot; target=&quot;_blank&quot;&gt;photo credit&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h3 id=&quot;bash-safeguard-for-the-rm-command&quot;&gt;BASH Safeguard for the &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command&lt;/h3&gt;

&lt;p&gt;One safeguard when removing files at the command line is to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; option when calling on the &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ rm -i &amp;lt;file to remove&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will prompt the interpreter to display a &lt;strong&gt;warning&lt;/strong&gt; message in response to your call of removing the targeted file(s):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smhigdon$ rm -i foo.txt
remove foo.txt?
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In response to this interactive prompt by the system, you may then respond by simply typing &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; for yes or no respectively, followed by the return key. If you types &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;, the file will not be deleted, whereas typing &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; deletes the file. You may think that this is a bit tedious, typing &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; every time you want to safeguard deleting a file by mistake - it is! Luckily, there is a way to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; command safe by default, by embedding an &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; into your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;. &lt;a href=&quot;/BIT150_website/2017/10/05/bash_profile/&quot; target=&quot;_blank&quot;&gt;See the lab page on the .bash_profile&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slack Workspace for BIT150</title>
   <link href="http://localhost:4000/2017/10/01/slack_site/"/>
   <updated>2017-10-01T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/10/01/slack_site</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.slack.com/features&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt; is one method of staying connected that has been widely adopted by different groups within the UC Davis community. Dan and I have created a Slack workspace specifically for our use this quarter in the BIT150 class.&lt;/p&gt;

&lt;p&gt;Please follow &lt;a href=&quot;https://join.slack.com/t/bit150-2017/shared_invite/enQtMjQ5NzU1MzI1NTExLTJiYTU2YjkzYzdiOTgxMjlkOGQwNGE3NzVjNzUwZjIxYmI1NDEyMWVkODFmNjVhN2ZlZmJlM2I4MmQ0ZmU3Nzg&quot; target=&quot;_blank&quot;&gt;this link&lt;/a&gt; to join the BIT150-2017 slack channel.&lt;/p&gt;

&lt;p&gt;Some benefits for us to use slack are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sharing documents with one another&lt;/li&gt;
  &lt;li&gt;group messaging&lt;/li&gt;
  &lt;li&gt;direct messaging&lt;/li&gt;
  &lt;li&gt;asking questions about course related content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using slack is not a requirement, but it is a great way for connecting with one another when we are not in class.&lt;/p&gt;

&lt;p&gt;If you have any questions about slack, please feel free to e-mail us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;mailto:deruncie@ucdavis.edu&quot;&gt;deruncie@ucdavis.edu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;mailto:smhigdon@ucdavis.edu&quot;&gt;smhigdon@ucdavis.edu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write the questions directly in the slack workspace once you join!&lt;/p&gt;

&lt;p&gt;Dan and Shawn&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introduction to the Unix Shell</title>
   <link href="http://localhost:4000/2017/09/28/command-line/"/>
   <updated>2017-09-28T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/09/28/command-line</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Lessons modified from: &lt;a href=&quot;https://hackmd.io/MwIwZgLAJgrA7HAtANmADgKaIgTisRAQ0JAMIGNC4AGE8uCZHIA=&quot;&gt;Data Carpentry Intro to Shell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Helpful Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swcarpentry/DEPRECATED-boot-camps/blob/master/shell/shell_cheatsheet.md&quot;&gt;Shell Basic Commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fosswire.com/post/2007/08/unixlinux-command-cheat-sheet/&quot;&gt;Shell Cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://explainshell.com&quot;&gt;Explain Shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-shell&quot;&gt;The Shell&lt;/h1&gt;

&lt;h2 id=&quot;learning-objectives&quot;&gt;Learning Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Describe what the shell is and how it is used.&lt;/li&gt;
  &lt;li&gt;Summarize reasons why learning the shell is beneficial.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-the-shell&quot;&gt;What is the shell?&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;shell&lt;/em&gt; is a program that presents a command line interface
which allows you to control your computer using commands entered
with a keyboard instead of controlling graphical user interfaces
(GUIs) with a mouse/keyboard combination.&lt;/p&gt;

&lt;p&gt;There are many reasons to learn about the shell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For most bioinformatics tools, you have to use the shell. There is no
graphical interface.&lt;/li&gt;
  &lt;li&gt;The shell gives you &lt;strong&gt;power&lt;/strong&gt;. The command line gives you the power to do your work more efficiently and more quickly. When you need to do things tens to hundreds of times, knowing how to use the shell is transformative.&lt;/li&gt;
  &lt;li&gt;To use remote computers or cloud computing, you need to use the shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/gvng.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unix is user-friendly. It’s just very selective about who its friends are.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-access-the-shell&quot;&gt;How to access the shell&lt;/h2&gt;

&lt;p&gt;The shell is already available on Mac and Linux. For Windows, you’ll
have to download a separate program.&lt;/p&gt;

&lt;h2 id=&quot;mac&quot;&gt;Mac&lt;/h2&gt;
&lt;p&gt;On Mac, the shell is available through the pre-installed &lt;em&gt;Terminal&lt;/em&gt; application: Applications -&amp;gt; Utilities -&amp;gt; Terminal
Go ahead and drag the Terminal application to your Dock for easy access.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;For Windows, we’re going to be using gitbash.
Download and install &lt;a href=&quot;http://msysgit.github.io&quot;&gt;gitbash&lt;/a&gt; on your computer.
Open up the program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;starting-with-the-shell&quot;&gt;Starting with the shell&lt;/h2&gt;

&lt;p&gt;We will spend most of our time learning about the basics of the shell by manipulating some experimental data.&lt;/p&gt;

&lt;p&gt;Now we’re going to download the data for the tutorial. For this you’ll need internet access, because you’re going to get it off the web.&lt;/p&gt;

&lt;p&gt;Open the shell.&lt;/p&gt;

&lt;p&gt;Enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/edamame-course/edamame-data.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will grab all of the data needed for this workshop from the internet.  (We’re not going to talk about git right now, but it’s a tool for
implementing version control.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now let’s go in to that directory&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; stands for ‘change directory’&lt;/p&gt;

&lt;p&gt;In this directory, there should be some things we just downloaded.
Let’s check. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ls stands for ‘list’ and it returns the contents of a directory as a list.&lt;/p&gt;

&lt;p&gt;There are a few directories there, but not too many. Let’s go look in the data directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd shell
ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In there, all mixed up together are files and directories/folders. If we want to know which is which, we can type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -F
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anything with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/&quot;&lt;/code&gt; after it is a directory.  Things with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; after them are programs. If there’s nothing there it’s a file.&lt;/p&gt;

&lt;p&gt;You can also use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; to see whether items in a directory are files or directories. &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; gives a lot more information too, such as the size of the file&lt;/p&gt;

&lt;p&gt;So, we can see that we have several files, directories and a program. Great!&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;Most programs take additional arguments that control their exact behavior. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; are arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; program, like many programs, take a lot of arguments. But how do we know what the options are to particular commands?&lt;/p&gt;

&lt;p&gt;Most commonly used shell programs have a manual. You can access the manual using the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program. Try entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;man ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will open the manual page for &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Use the space key to go forward and b to go backwards. When you are done reading, just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to quit.&lt;/p&gt;

&lt;p&gt;Programs that are run from the shell can get extremely complicated. To see an example, open up the manual page for the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; program. No one can possibly learn all of these arguments, of course. So you will probably find yourself referring back to the manual page frequently.&lt;/p&gt;

&lt;h2 id=&quot;the-unix-directory-file-structure-aka-where-am-i&quot;&gt;The Unix directory file structure (a.k.a. where am I?)&lt;/h2&gt;

&lt;p&gt;As you’ve already just seen, you can move around in different directories or folders at the command line. Why would you want to do this, rather than just navigating around the normal way.&lt;/p&gt;

&lt;p&gt;When you’re working with bioinformatics programs, you’re working with your data and it’s key to be able to have that data in the right place and make sure the program has access to the data. Many of the problems people run in to with command line bioinformatics programs is not having the data in the place the program expects it to be.&lt;/p&gt;

&lt;h2 id=&quot;moving-around-the-file-system&quot;&gt;Moving around the file system&lt;/h2&gt;

&lt;p&gt;Let’s practice moving around a bit.&lt;/p&gt;

&lt;p&gt;We’re going to work in that &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory we just downloaded.&lt;/p&gt;

&lt;p&gt;First let’s navigate there using the regular way by clicking on the different folders.&lt;/p&gt;

&lt;p&gt;First we did something like go to the folder of our username. Then we opened
&lt;code class=&quot;highlighter-rouge&quot;&gt;'edamame-data'&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;'shell'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s draw out how that went.&lt;/p&gt;

&lt;p&gt;Now let’s draw some of the other files and folders we could have clicked on.&lt;/p&gt;

&lt;p&gt;This is called a hierarchical file system structure, like an upside down tree with root (/) at the base that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we’re going to try a hunt. Move around in the ‘hidden’ directory and try to find the file &lt;code class=&quot;highlighter-rouge&quot;&gt;'youfoundit.txt'&lt;/code&gt;
***&lt;/p&gt;

&lt;h2 id=&quot;examining-the-contents-of-other-directories&quot;&gt;Examining the contents of other directories&lt;/h2&gt;

&lt;p&gt;By default, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; command. However, you can also give &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; the names of other directories to view. Navigate to the home directory if you are not already there.&lt;/p&gt;

&lt;p&gt;Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls edamame-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will list the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt; directory without you having to navigate there.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; command works in a similar way. Try entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data/shell/hidden
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and you will jump directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt; without having to go through the intermediate directory.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try finding the &lt;code class=&quot;highlighter-rouge&quot;&gt;'anotherfile.txt'&lt;/code&gt; file without changing directories.
&lt;em&gt;**&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;shortcut-tab-completion&quot;&gt;Shortcut: Tab Completion&lt;/h3&gt;

&lt;p&gt;Navigate to the home directory. Typing out directory names can waste a lot of time. When you start typing out the name of a directory, then hit the tab key, the shell will try to fill in the rest of the directory name. For example, enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd e&amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The shell will fill in the rest of the directory name for &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt;. Now go to edamame-data/shell/MiSeq&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls C01&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you hit the first tab, nothing happens. The reason is that there
are multiple directories in the home directory which start with
&lt;code class=&quot;highlighter-rouge&quot;&gt;C01&lt;/code&gt;. Thus, the shell does not know which one to fill in. When you hit
tab again, the shell will list the possible choices.&lt;/p&gt;

&lt;p&gt;Tab completion can also fill in the names of programs. For example,
enter &lt;code class=&quot;highlighter-rouge&quot;&gt;e&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;/code&gt;. You will see the name of every program that
starts with an &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. One of those is &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;. If you enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ec&amp;lt;tab&amp;gt;&lt;/code&gt; you
will see that tab completion works.&lt;/p&gt;

&lt;h2 id=&quot;saving-time-with-shortcuts-wild-cards-and-tab-completion&quot;&gt;Saving time with shortcuts, wild cards, and tab completion&lt;/h2&gt;

&lt;h3 id=&quot;shortcuts&quot;&gt;Shortcuts&lt;/h3&gt;

&lt;p&gt;There are some shortcuts which you should know about. Dealing with the
home directory is very common. So, in the shell the tilde character,
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;~&quot;&lt;/code&gt;, is a shortcut for your home directory. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame&lt;/code&gt;
directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data
cd shell
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints the contents of your home directory, without you having to
type the full path. The shortcut &lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt; always refers to the directory
above your current directory. Thus:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data&lt;/code&gt;. You can chain
these together, so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ../../
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username&lt;/code&gt; which is your home
directory. Finally, the special directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; always refers to your
current directory. So, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls .&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ././././.&lt;/code&gt; all do the
same thing, they print the contents of the current directory. This may
seem like a useless shortcut right now, but we’ll see when it is
needed in a little while.&lt;/p&gt;

&lt;p&gt;To summarize, while you are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory, the commands
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls ~&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ~/.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ../../&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ls /home/username&lt;/code&gt; all do exactly the
same thing. These shortcuts are not necessary, they are provided for
your convenience.&lt;/p&gt;

&lt;h3 id=&quot;wild-cards&quot;&gt;Wild cards&lt;/h3&gt;

&lt;p&gt;Navigate to the MiSeq directory using”&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/edamame-data/shell/MiSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This directory contains our FASTQ files and some other ones we’ll need for analyses. If we type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, we will see that there are a bunch of files with long file names. Some of the end with &lt;code class=&quot;highlighter-rouge&quot;&gt;.fastq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character is a shortcut for “everything”. Thus, if you enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ls *&lt;/code&gt;, you will see all of the contents of a given directory. Now try this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls *fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This lists every file that ends with a &lt;code class=&quot;highlighter-rouge&quot;&gt;fastq&lt;/code&gt;. This command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /usr/bin/*.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lists every file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; that ends in the characters &lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have paired end sequencing, so for every sample we have two files. If we want to just see the list of the files for the forward direction sequencing we can use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls *R*fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lists every file in the current directory whose name contains the letter &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, and ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;fastq&lt;/code&gt;. There are twenty such files which
we would expect because we have 20 samples.&lt;/p&gt;

&lt;p&gt;So how does this actually work? Well…when the shell (bash) sees a word that contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character, it automatically looks for filenames
that match the given pattern. In this case, it identified four such files. Then, it replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;*R*fastq&lt;/code&gt; with the list of files, separated by spaces.&lt;/p&gt;

&lt;p&gt;What happens if you do &lt;code class=&quot;highlighter-rouge&quot;&gt;R*fastq&lt;/code&gt;?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do each of the following using a single &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; command without
navigating to a different directory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that start with the letter ‘c&lt;/li&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that contain the letter ‘a’&lt;/li&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that end with the letter ‘o’&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BONUS: List all of the files in ‘/bin’ that contain the letter ‘a’ or ‘c’&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;command-history&quot;&gt;Command History&lt;/h2&gt;

&lt;p&gt;You can easily access previous commands.  Hit the up arrow. Hit it again.  You can step backwards through your command history. The down arrow takes your forwards in the command history.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^-C&lt;/code&gt; will cancel the command you are writing, and give you a fresh prompt.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^-R&lt;/code&gt; will do a reverse-search through your command history.  This is very useful.&lt;/p&gt;

&lt;p&gt;You can also review your recent commands with the &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; command.  Just enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;history
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to see a numbered list of recent commands, including this just issues
&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; command.  You can reuse one of these commands directly by
referring to the number of that command.&lt;/p&gt;

&lt;p&gt;If your history looked like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;259  ls *
260  ls /usr/bin/*.sh
261  ls *R*fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;then you could repeat command #260 by simply entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!260
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(that’s an exclamation mark).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find the line number in your history for the last exercise (listing
files in /bin) and reissue that command.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;examining-files&quot;&gt;Examining Files&lt;/h2&gt;

&lt;p&gt;We now know how to switch directories, run programs, and look at the
contents of directories, but how do we look at the contents of files?&lt;/p&gt;

&lt;p&gt;The easiest way to examine a file is to just print out all of the
contents using the program &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;. Enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints out the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercises&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Print out the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/edamame-data/shell/MiSeq/Centralia_mapping_files/Collapsed_Centralia_full_map.txt&lt;/code&gt;
file. What does this file contain?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Without changing directories, (you should still be in &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt;),
use one short command to print the contents of all of the files in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data/shell/MiSeq&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Make sure we’re in the right place for the next set of the lessons. We
want to be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory. Check if you’re there with &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;
and if not navigate there. One way to do that would be&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/edamame-data/shell/MiSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; is a terrific program, but when the file is really big, it can
be annoying to use. The program, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, is useful for this
case. Enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; opens the file, and lets you navigate through it. The commands
are identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some commands in &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“space”&lt;/td&gt;
      &lt;td&gt;to go forward&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“b”&lt;/td&gt;
      &lt;td&gt;to go backwarsd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“g”&lt;/td&gt;
      &lt;td&gt;to go to the beginning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“G”&lt;/td&gt;
      &lt;td&gt;to go to the end&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“q”&lt;/td&gt;
      &lt;td&gt;to quit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; also gives you a way of searching through files. Just hit the
“/” key to begin a search. Enter the name of the word you would like
to search for and hit enter. It will jump to the next location where
that word is found. Try searching the &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary.txt&lt;/code&gt; file for the
word “cat”. If you hit “/” then “enter”, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; will just repeat
the previous search. &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; searches from the current location and
works its way forward. If you are at the end of the file and search
for the word “cat”, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; will not find it. You need to go to the
beginning of the file and search.&lt;/p&gt;

&lt;p&gt;For instance, let’s search for the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;1101:14341&lt;/code&gt; in our file.
You can see that we go right to that sequence and can see
what it looks like.&lt;/p&gt;

&lt;p&gt;Remember, the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program actually uses &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; internally and
therefore uses the same commands, so you can search documentation
using “/” as well!&lt;/p&gt;

&lt;p&gt;There’s another way that we can look at files, and in this case, just
look at part of them. This can be particularly useful if we just want
to see the beginning or end of the file, or see how it’s formatted.&lt;/p&gt;

&lt;p&gt;The commands are &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; and they just let you look at
the beginning and end of a file respectively.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head C01D01F_sub.fastq
tail C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; option to either of these commands can be used to print the
first or last &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; lines of a file. To print the first/last line of the
file use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head -n 1 C01D01F_sub.fastq
tail -n 1 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;searching-files&quot;&gt;Searching files&lt;/h2&gt;

&lt;p&gt;We showed a little how to search within a file using &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. We can also
search within files without even opening them, using &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;. Grep is a command-line
utility for searching plain-text data sets for lines matching a string or regular expression.
Let’s give it a try!&lt;/p&gt;

&lt;p&gt;Let’s search for that sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;22029:7208&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep 22029:7208 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We get back the whole line that had &lt;code class=&quot;highlighter-rouge&quot;&gt;'22029:7208'&lt;/code&gt; in it. What if we wanted all
four lines, the whole part of that FASTQ sequence, back instead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep -A 3 22029:7208 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; flag stands for “after match” so it’s returning the line that
matches plus the three after it. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt; flag returns that number of lines
before the match.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Search for the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;'TTATCCGGATTTATTGGGTTTAAAGGGT'&lt;/code&gt; in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file and in the output have the sequence name and the sequence. e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;@M00967:43:000000000-A3JHG:1:2114:11799:28499 1:N:0:188
TACGGAGGATGCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGTAGGCGGGATGCAG&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for that sequence in all the FASTQ files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;redirection--pipes&quot;&gt;Redirection / Pipes&lt;/h2&gt;

&lt;p&gt;We’re excited we have all these sequences that we care about that we just got from the FASTQ files. That is a really important motif that is going to help us answer our important question. But all those sequences just went whizzing by with grep. How can we capture them?&lt;/p&gt;

&lt;p&gt;We can do that with something called “redirection”. The idea is that we’re redirecting the output to the terminal (all the stuff that went whizzing by) to something else. In this case, we want to print it to a file, so that we can look at it later.&lt;/p&gt;

&lt;p&gt;The redirection command for putting something in a file is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s try it out and put all the sequences that contain &lt;code class=&quot;highlighter-rouge&quot;&gt;'TTATCCGGATTTATTGGGTTTAAAGGGT'&lt;/code&gt;
from all the files in to another file called &lt;code class=&quot;highlighter-rouge&quot;&gt;'good-data2.txt'&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep -B 2 TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq &amp;gt; good-data2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The prompt should sit there a little bit, and then it should look like nothing happened. But type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. You should have a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.txt&lt;/code&gt;. Take a look at it and see if it has what you think it should.&lt;/p&gt;

&lt;p&gt;Another useful redirection command that is called a “pipe”, and it is invoked by typing the character &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; with a single space between itself and both commands that are being connected. It’s probably not a key on your keyboard you use very much. What &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; does is take the output that would usually be output to the terminal and redirects it as input for the next command. When it was all whizzing by before, we wished we could just slow it down and look at it, like we can with &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. Well it turns out that we can by piping the output of the &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command to the &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can use the arrows to scroll up and down and use &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to get out.&lt;/p&gt;

&lt;p&gt;We can also do something tricky and use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt; stands for
&lt;code class=&quot;highlighter-rouge&quot;&gt;word count&lt;/code&gt;. It counts the number of lines or characters. So, we can use
it to count the number of lines we’re getting back from our &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command.
And that will magically tell us how many sequences we’re finding. We’re&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | wc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That tells us the number of lines, words and characters in the file. If we just want the number of lines, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; flag for &lt;code class=&quot;highlighter-rouge&quot;&gt;lines&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirecting is not super intuitive, but it’s really powerful for stringing together these different commands, so you can do whatever you need to do.&lt;/p&gt;

&lt;p&gt;The philosophy behind these command line programs is that none of them really do anything all that impressive. BUT when you start chaining
them together, you can do some really powerful things really efficiently. If you want to be proficient at using the shell, you must learn to become proficient with the pipe and redirection operators:
&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-moving-copying-and-removing&quot;&gt;Creating, moving, copying, and removing&lt;/h2&gt;

&lt;p&gt;Now we can move around in the file structure, look at files, search files, redirect. But what if we want to do normal things like copy files or move them around or get rid of them. Sure we could do most of these things without the command line, but what fun would that be?! Besides it’s often faster to do it at the command line, or you’ll be on a remote server like Amazon where you won’t have another option.&lt;/p&gt;

&lt;p&gt;The stability.files file is one that tells us what sample name goes with what sequences. This is a really important file, so we want to make a copy so we don’t lose it.&lt;/p&gt;

&lt;p&gt;Lets copy the file using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command backs up the file. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; directory and enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp good-data2.txt good-data2.backup.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; has been created as a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s make a &lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt; directory where we can put this file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command is used to make a directory. Just enter &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;
followed by a space, then the directory name.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir backup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can now move our backed up file in to this directory. We can
move files around using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;. Enter this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv good-data2.backup.txt backup/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This moves &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; into the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;backup/&lt;/code&gt; or
the full path would be &lt;code class=&quot;highlighter-rouge&quot;&gt;~/edamame-data/shell/MiSeq/backup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command is also how you rename files. Since this file is so
important, let’s rename it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv backup/good-data2.backup.txt backup/good-data2.backup_IMPORTANT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the file name has been changed to good-data2.backup_IMPORTANT. Let’s delete
the backup file now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm backup/good-data2.backup_IMPORTANT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; file removes the file. Be careful with this command. It doesn’t
just nicely put the files in the Trash. They’re really gone.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rename the &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup_IMPORTANT&lt;/code&gt; file to &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MiSeq&lt;/code&gt; directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then, copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; file into &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, will NOT delete directories. You can tell &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; to
delete a directory using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; option. Let’s delete that &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; directory
we just made. Enter the following command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -r new&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-programs&quot;&gt;Running programs&lt;/h2&gt;

&lt;p&gt;Commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; are just ordinary programs on the computer. A program is just a file that you can &lt;em&gt;execute&lt;/em&gt;. The program &lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt; tells you the location of a particular program. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Will return “/bin/ls”. Thus, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; is a program that sits inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; directory. Now enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which find
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will see that &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; is a program that sits inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;So … when we enter a program name, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, and hit enter, how does the shell know where to look for that program? How does it know to run &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt; when we enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. The answer is that when we enter a program name and hit enter, there are a few standard places that the shell automatically looks. If it can’t find the program in any of those places, it will print an error saying “command not found”. Enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will print out the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable. More on environment variables later. Notice that a list of directories, separated by colon characters, is listed. These are the places the shell looks for programs to run. If your program is not in this list, then an error is printed. The shell ONLY checks in the places listed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory and list the contents. You will notice that there is a program (executable file) called &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; in this directory. Now, try to run the program by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should get an error saying that hello.sh cannot be found. That is because the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data/shell&lt;/code&gt; is not in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. You can run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; program by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; is a shortcut for the current working directory. This tells the shell to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; program which is located right here. So, you can run any program by entering the path to that program. You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; equally well by specifying:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/username/edamame-data/shell/hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/edamame-data/shell/hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When there are no &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; characters, the shell assumes you want to look in one of the default places for the program.&lt;/p&gt;

&lt;h1 id=&quot;for-future-reference&quot;&gt;For Future Reference&lt;/h1&gt;

&lt;h1 id=&quot;finding-files&quot;&gt;Finding files&lt;/h1&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; program can be used to find files based on arbitrary criteria. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; directory and enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints the name of every file or directory, recursively, starting from the current directory. Let’s exclude all of the directories:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This tells &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; to locate only files. Now try these commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -name &quot;*1*&quot;
find . -type f -name &quot;*1*&quot; -or -name &quot;*2*&quot; -print
find . -type f -name &quot;*1*&quot; -and -name &quot;*2*&quot; -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command can acquire a list of files and perform some
operation on each file. Try this command out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -exec grep Volume {} \;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command finds every file starting from &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;. Then it searches each file for a line which contains the word “Volume”. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; refers to
the name of each file. The trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;\;&lt;/code&gt; is used to terminate the command.  This command is slow, because it is calling a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; for each item the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; returns.&lt;/p&gt;

&lt;p&gt;A faster way to do this is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -print | xargs grep Volume
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; generates a list of all the files we are interested in, then we pipe them to &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; takes the items given to it and passes them as arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; generally only creates a single instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; (or whatever program it is running).&lt;/p&gt;

&lt;h2 id=&quot;wherehow-can-i-learn-more-about-the-shell&quot;&gt;Where/How can I learn more about the shell?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rik.smith-unna.com/command_line_bootcamp/?id=takvnrdbvjd&quot;&gt;Command-Line Boot camp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://files.fosswire.com/2007/08/fwunixref.pdf&quot;&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://explainshell.com&quot;&gt;explainshell.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html&lt;/li&gt;
  &lt;li&gt;man bash&lt;/li&gt;
  &lt;li&gt;Google - if you don’t know how to do something, try a Google Search. Other people have probably had the same question.&lt;/li&gt;
  &lt;li&gt;Learn by doing. There’s no real other way to learn this than by trying it out.&lt;/li&gt;
  &lt;li&gt;Familiarize yourself with terminal-based text editors:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/&quot; target=&quot;_blank&quot;&gt;nano&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&quot; target=&quot;_blank&quot;&gt;emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://computers.tutsplus.com/tutorials/vim-for-beginners--cms-21118&quot; target=&quot;_blank&quot;&gt;vim&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open pdfs from the command line, automate something you don’t really need to automate.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Project 1 - Mining bioinformatics databases</title>
   <link href="http://localhost:4000/2017/09/28/project-1/"/>
   <updated>2017-09-28T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/09/28/project-1</id>
   <content type="html">&lt;p&gt;The goal of this project is to explore online public databases and discover information on a gene that may be relevant to its role in diseases or other traits.&lt;/p&gt;

&lt;p&gt;First choose a trait. Human diseases work well because there have been studied so intensely, but other characteristics of humans, animals, plants, or even bacteria can work. I recommend sticking to model systems (human, mouse, Arabidopsis) - there is much more information about these organisms in most databases.&lt;/p&gt;

&lt;p&gt;Once you have chosen your trait, you need to find a gene that has been linked to that trait.
A useful place to start for Human traits is the &lt;a href=&quot;https://www.omim.org&quot;&gt;Online Mendelian Inheritance in Man&lt;/a&gt; databases. &lt;a href=&quot;https://www.wikipedia.org/&quot;&gt;Wikipedia&lt;/a&gt;, or just &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; also work.&lt;/p&gt;

&lt;p&gt;Here are some trait - gene pairs as examples:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Trait&lt;/th&gt;
      &lt;th&gt;Gene&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cystic Fibrosis&lt;/td&gt;
      &lt;td&gt;CFTR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Acondroplasia&lt;/td&gt;
      &lt;td&gt;FGFR3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Breast Cancer&lt;/td&gt;
      &lt;td&gt;BRCA1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alzheimers disease&lt;/td&gt;
      &lt;td&gt;APOE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Type-2 Diabetes&lt;/td&gt;
      &lt;td&gt;INS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mad cow disease&lt;/td&gt;
      &lt;td&gt;PRNP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sprinter gene&lt;/td&gt;
      &lt;td&gt;ACTN3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Shade-response&lt;/td&gt;
      &lt;td&gt;PHYB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flower defects&lt;/td&gt;
      &lt;td&gt;AP1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You’re goal in &lt;strong&gt;Projects 1 and 2&lt;/strong&gt; is to build a model for why mutations in this gene are associated with your trait.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Project 1&lt;/strong&gt;, as a class I want you to explore as many different databases as possible to build a catalog of types of bioinformatics information available for different classes of genes. I want each of you to choose one database and prepare a Wiki page documenting the database. Use Markdown to compose your page. You can use the &lt;a href=&quot;https://hackmd.io/&quot;&gt;HackMD&lt;/a&gt; tool. Provide answers and links or images to address as many of the following questions as possible. Organize the information in a readable way. We will collect these into a class Wiki site at the end.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What type of data does the database hold? What types of biological questions could use this database to address?&lt;/li&gt;
  &lt;li&gt;Where does the data come from? Who collects it, currates it, and publishes it?&lt;/li&gt;
  &lt;li&gt;How are the data stored? In what format?&lt;/li&gt;
  &lt;li&gt;What tools are available for accessing the data?&lt;/li&gt;
  &lt;li&gt;Are there restrictions placed on how you are allowed to use the data? What is it’s license? What does this mean?&lt;/li&gt;
  &lt;li&gt;Find a paper that cites the database. Hint: use &lt;a href=&quot;https://scholar.google.com/&quot;&gt;Google scholar&lt;/a&gt;. What was the study and why did they use this database?&lt;/li&gt;
  &lt;li&gt;How many entries are there for your gene / mutation / disease?&lt;/li&gt;
  &lt;li&gt;Describe one entry. Provide a direct link to this entry. What did you learn about your gene?&lt;/li&gt;
  &lt;li&gt;Describe some types of biological questions that you could use this database to address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every student must choose a different database. There are 1000s of databases available. Usefull lists
can be found &lt;a href=&quot;https://academic.oup.com/nar/article/45/D1/D1/2770636/The-24th-annual-Nucleic-Acids-Research-database&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_biological_databases#DNA_Databases&quot;&gt;here&lt;/a&gt;. When you choose a database, enter it in the google doc &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1gpUUcnm7zhglA4vG8o2KivsalVzhVJmwRXBPyTFdBoE/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.
Before you choose your database, ensure that someone else hasn’t chosen that one first!&lt;/li&gt;
  &lt;li&gt;The only limitation on the database is that it contains information on your groups gene or disease. Find a database
that looks interesting!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;strong&gt;Project 2&lt;/strong&gt;, you can refer back to this class resource to identify types of data that you can integrate to build a model for your gene.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: If you find a databases that you want to explore that indexes something other than genes, ask&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1 - Intro to Bioinformatics Databases</title>
   <link href="http://localhost:4000/2017/09/28/lab-01/"/>
   <updated>2017-09-28T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/09/28/lab-01</id>
   <content type="html">&lt;h2 id=&quot;1-lab-intro&quot;&gt;1. Lab intro&lt;/h2&gt;

&lt;h2 id=&quot;2-answer-questions-about-human-hemoglobin---subunit-beta&quot;&gt;2. Answer questions about Human Hemoglobin - subunit beta&lt;/h2&gt;

&lt;h3 id=&quot;what-chromosome-is-hbb-on&quot;&gt;What chromosome is HBB on?&lt;/h3&gt;
&lt;h3 id=&quot;how-many-exons-does-this-gene-have&quot;&gt;How many exons does this gene have?&lt;/h3&gt;
&lt;h3 id=&quot;briefly-describe-how-the-gene-works&quot;&gt;Briefly describe how the gene works?&lt;/h3&gt;
&lt;h3 id=&quot;what-diseases-are-caused-by-mutations-in-the-gene&quot;&gt;What diseases are caused by mutations in the gene?&lt;/h3&gt;
&lt;h3 id=&quot;find-a-paper-that-describes-an-aspect-of-hbbs-function&quot;&gt;Find a paper that describes an aspect of HBB’s function&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://hackmd.io/&quot;&gt;HackMD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copy these questions to a new document and save as Lab1.md&lt;/li&gt;
  &lt;li&gt;Fill in answers to each qustion&lt;/li&gt;
  &lt;li&gt;Export as HTML&lt;/li&gt;
  &lt;li&gt;Submit file on Canvas under Assignments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a guide to composing documents using Markdown: &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On HackMD, you can collaborate on documents by sharing the URL. You can also download the document to your computer to save it, and re-upload it later. You can also drag images onto your document and it will upload them.&lt;/p&gt;

&lt;h2 id=&quot;3-exploration-of-ncbi&quot;&gt;3. Exploration of &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/&quot;&gt;NCBI&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;4-begin-project-1&quot;&gt;4. Begin &lt;a href=&quot;/BIT150_website/2017/09/28/project-1/&quot;&gt;Project 1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lists of databases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://academic.oup.com/nar/article/45/D1/D1/2770636/The-24th-annual-Nucleic-Acids-Research-database&quot;&gt;Nucleic Acids Research&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_biological_databases#DNA_Databases&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://omictools.com/&quot;&gt;OmicsTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-intro-to-the-unix-shell&quot;&gt;5. Intro to the Unix Shell&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://deruncie.github.io/shell-novice/&quot;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/BIT150_website/2017/09/27/unix_commands/&quot;&gt;Unix commands cheatsheat&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;if-you-want-extra-practice-after-completing-the-in-class-tutorial-try-working-through-a-supplemental-lesson-here&quot;&gt;If you want extra practice after completing the in-class tutorial, try working through a supplemental lesson &lt;a href=&quot;/BIT150_website/2017/09/28/command-line/&quot;&gt;here&lt;/a&gt;.&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>cheat-sheet of all the commands we saw in Lab 1</title>
   <link href="http://localhost:4000/2017/09/27/unix_commands/"/>
   <updated>2017-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/09/27/unix_commands</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints your username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;print working directory&lt;/strong&gt; prints the path to the current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;change directory&lt;/strong&gt; changes to directory &lt;code class=&quot;highlighter-rouge&quot;&gt;new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists contents of current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -F&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists contents of current directory and annotates folders (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) and programs (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man ls&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; is a program for viewing manuals (here of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; program). Use &lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt; to page, arrow keys to move, and &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to quit. In the SYNOPSIS, arguments in square brackets are optional.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go to the &lt;strong&gt;root&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go to the &lt;strong&gt;home&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd .&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;stay in the &lt;strong&gt;current&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go &lt;strong&gt;up&lt;/strong&gt; one directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../../&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go &lt;strong&gt;up&lt;/strong&gt; two directories at once&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd -&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go back to the last directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;print the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; to the screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; new_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;redirect&lt;/strong&gt; command. Instead of printing to the screen, save output in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt; old_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;append&lt;/strong&gt; output to the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;creates the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;new_dir&lt;/code&gt; in the current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv my_file my_folder/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;moves&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to folder &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv old_file new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;renames&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv old_file my_folder/new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;moves&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt; and renames it to &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv files* my_folder/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;moves all files beginning with &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; to folder &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls files*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists all files that begin with the characters &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;print the last 1000 commands to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash my_script.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;runs each line of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_script.sh&lt;/code&gt; as if you had typed it into Bash directly&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variable=some_text&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; the value &lt;code class=&quot;highlighter-rouge&quot;&gt;some_text&lt;/code&gt;. Note: no spaces around &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;access the value held by &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the value held by &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo ${variable}.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the value held by the variable followed by the text &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# echo ${variable}.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;does nothing! &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; is a comment character, which tells Bash to ignore everything else on the line&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;deletes file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;immediately&lt;/strong&gt;.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -i my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;asks before deleting&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -f my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt; &lt;strong&gt;and all its contents&lt;/strong&gt; immediately&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -if my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;asks before deleting each file in &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;, and then deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat My File.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;tries to print the file &lt;code class=&quot;highlighter-rouge&quot;&gt;My&lt;/code&gt; to the screen (gives error: file not found). Then tries to print the file &lt;code class=&quot;highlighter-rouge&quot;&gt;File.txt&lt;/code&gt; to the screen (another error)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat &quot;My File.txt&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;successfully prints the file &lt;code class=&quot;highlighter-rouge&quot;&gt;My File.txt&lt;/code&gt; to the screen. &lt;strong&gt;Avoid spaces in file names!&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the first 10 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head -n 3 my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the first 3 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -n 3 my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the last 3 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wc my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the #lines, #words, and #characters of file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen. Options &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; select fewer stats&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;sorts&lt;/strong&gt; the lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;alphabetically&lt;/strong&gt; by the first &lt;strong&gt;word&lt;/strong&gt; in each line&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort -n my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;sorts&lt;/strong&gt; the lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;numerically&lt;/strong&gt;, interpreting the first word as a number&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uniq my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;compares each line of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; with the preceeding one, and prints it to the screen if it is different&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd1 | cmd2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;run command &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd1&lt;/code&gt; and then take the output and get it to command &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd2&lt;/code&gt; to run immediately, avoiding any intermediate files&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;for-loop-syntax&quot;&gt;For loop syntax&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for f in list
 do
  echo $f
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; is any list of values, separated by a &lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt;. You can type: &lt;code class=&quot;highlighter-rouge&quot;&gt;file1 file2 file3&lt;/code&gt;. Or you can use a wild card &lt;code class=&quot;highlighter-rouge&quot;&gt;file*&lt;/code&gt;, or a sequence of numbers: &lt;code class=&quot;highlighter-rouge&quot;&gt;1 2 3 4 5&lt;/code&gt;, or faster: &lt;code class=&quot;highlighter-rouge&quot;&gt;$(seq 1 5)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The for loop will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;take each value in turn, and assign it to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;f=value&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the lines betwen &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;here, it runs &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $f&lt;/code&gt;; ie, it echo’s the &lt;strong&gt;value&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; to the screen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Goes back to the beginning. If there is another value in the list, it starts again at (1). Otherwise, it exits.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Welcome BIT150 class of 2017!</title>
   <link href="http://localhost:4000/2017/09/26/welcome/"/>
   <updated>2017-09-26T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2017/09/26/welcome</id>
   <content type="html">&lt;p&gt;Welcome to BIT150.&lt;/p&gt;

&lt;p&gt;The first lecture will be on Thursday 9/28 at 10:00 in Hoagland 113.&lt;/p&gt;

&lt;p&gt;Prior to class, please read the &lt;a href=&quot;http://genome.cshlp.org/content/25/10/1417.short&quot; target=&quot;_blank&quot;&gt;Schatz 2015 paper&lt;/a&gt;, and complete the BIT 150 Pre-Class Assessment - both available on the CANVAS site. The paper discusses the future of biological research over the next 20 years. Hopefully it will provide motivation for the content we’ll cover this quarter. The quiz is a refresher on biological concepts that we will build on throughout the course.&lt;/p&gt;

&lt;p&gt;We look forward to meeting you on Thursday!&lt;/p&gt;

&lt;p&gt;Dan and Shawn&lt;/p&gt;
</content>
 </entry>
 

</feed>
