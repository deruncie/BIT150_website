<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>BIT150</title>
 <link href="http://localhost:4000/BIT150_website/atom.xml" rel="self"/>
 <link href="http://localhost:4000/BIT150_website/"/>
 <updated>2018-09-11T15:38:12-07:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Dan Runcie and Shawn Higdon</name>
   <email></email>
 </author>

 
 <entry>
   <title>cheat-sheet of all the commands we saw in Lab 1</title>
   <link href="http://localhost:4000/2018/09/27/unix_commands/"/>
   <updated>2018-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/27/unix_commands</id>
   <content type="html">&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;whoami&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints your username&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;print working directory&lt;/strong&gt; prints the path to the current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;change directory&lt;/strong&gt; changes to directory &lt;code class=&quot;highlighter-rouge&quot;&gt;new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists contents of current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -F&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists contents of current directory and annotates folders (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) and programs (&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man ls&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; is a program for viewing manuals (here of the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; program). Use &lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt; to page, arrow keys to move, and &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to quit. In the SYNOPSIS, arguments in square brackets are optional.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go to the &lt;strong&gt;root&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ~&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go to the &lt;strong&gt;home&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd .&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;stay in the &lt;strong&gt;current&lt;/strong&gt; directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ..&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go &lt;strong&gt;up&lt;/strong&gt; one directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd ../../&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go &lt;strong&gt;up&lt;/strong&gt; two directories at once&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd -&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go back to the last directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;print the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; to the screen&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; new_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;redirect&lt;/strong&gt; command. Instead of printing to the screen, save output in the file &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt; old_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;append&lt;/strong&gt; output to the end of &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir new_dir&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;creates the folder &lt;code class=&quot;highlighter-rouge&quot;&gt;new_dir&lt;/code&gt; in the current directory&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv my_file my_folder/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;moves&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to folder &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv old_file new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;renames&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv old_file my_folder/new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;moves&lt;/strong&gt; file &lt;code class=&quot;highlighter-rouge&quot;&gt;old_file&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt; and renames it to &lt;code class=&quot;highlighter-rouge&quot;&gt;new_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mv files* my_folder/&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;moves all files beginning with &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt; to folder &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls files*&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;lists all files that begin with the characters &lt;code class=&quot;highlighter-rouge&quot;&gt;files&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;print the last 1000 commands to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash my_script.sh&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;runs each line of the file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_script.sh&lt;/code&gt; as if you had typed it into Bash directly&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;variable=some_text&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;assigns &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; the value &lt;code class=&quot;highlighter-rouge&quot;&gt;some_text&lt;/code&gt;. Note: no spaces around &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;access the value held by &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $variable&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the value held by &lt;code class=&quot;highlighter-rouge&quot;&gt;variable&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo ${variable}.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the value held by the variable followed by the text &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;# echo ${variable}.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;does nothing! &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; is a comment character, which tells Bash to ignore everything else on the line&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;deletes file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;immediately&lt;/strong&gt;.&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -i my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;asks before deleting&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -f my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt; &lt;strong&gt;and all its contents&lt;/strong&gt; immediately&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -if my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;asks before deleting each file in &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;, and then deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;my_folder&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat My File.txt&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;tries to print the file &lt;code class=&quot;highlighter-rouge&quot;&gt;My&lt;/code&gt; to the screen (gives error: file not found). Then tries to print the file &lt;code class=&quot;highlighter-rouge&quot;&gt;File.txt&lt;/code&gt; to the screen (another error)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat &quot;My File.txt&quot;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;successfully prints the file &lt;code class=&quot;highlighter-rouge&quot;&gt;My File.txt&lt;/code&gt; to the screen. &lt;strong&gt;Avoid spaces in file names!&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the first 10 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head -n 3 my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the first 3 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -n 3 my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the last 3 lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wc my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;prints the #lines, #words, and #characters of file &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; to the screen. Options &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-w&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; select fewer stats&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;sorts&lt;/strong&gt; the lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;alphabetically&lt;/strong&gt; by the first &lt;strong&gt;word&lt;/strong&gt; in each line&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sort -n my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;sorts&lt;/strong&gt; the lines of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; &lt;strong&gt;numerically&lt;/strong&gt;, interpreting the first word as a number&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uniq my_file&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;compares each line of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_file&lt;/code&gt; with the preceeding one, and prints it to the screen if it is different&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd1 | cmd2&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;run command &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd1&lt;/code&gt; and then take the output and get it to command &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd2&lt;/code&gt; to run immediately, avoiding any intermediate files&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;for-loop-syntax&quot;&gt;For loop syntax&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for f in list
 do
  echo $f
done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; is any list of values, separated by a &lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt;. You can type: &lt;code class=&quot;highlighter-rouge&quot;&gt;file1 file2 file3&lt;/code&gt;. Or you can use a wild card &lt;code class=&quot;highlighter-rouge&quot;&gt;file*&lt;/code&gt;, or a sequence of numbers: &lt;code class=&quot;highlighter-rouge&quot;&gt;1 2 3 4 5&lt;/code&gt;, or faster: &lt;code class=&quot;highlighter-rouge&quot;&gt;$(seq 1 5)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The for loop will:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;take each value in turn, and assign it to the variable &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt;:
    &lt;ul&gt;
      &lt;li&gt;ex. &lt;code class=&quot;highlighter-rouge&quot;&gt;f=value&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the lines betwen &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;done&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;here, it runs &lt;code class=&quot;highlighter-rouge&quot;&gt;echo $f&lt;/code&gt;; ie, it echo’s the &lt;strong&gt;value&lt;/strong&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; to the screen&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Goes back to the beginning. If there is another value in the list, it starts again at (1). Otherwise, it exits.&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>Introduction to the Unix Shell</title>
   <link href="http://localhost:4000/2018/09/27/command-line/"/>
   <updated>2018-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/27/command-line</id>
   <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Lessons modified from: &lt;a href=&quot;https://hackmd.io/MwIwZgLAJgrA7HAtANmADgKaIgTisRAQ0JAMIGNC4AGE8uCZHIA=&quot;&gt;Data Carpentry Intro to Shell&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Helpful Links:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/swcarpentry/DEPRECATED-boot-camps/blob/master/shell/shell_cheatsheet.md&quot;&gt;Shell Basic Commands&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fosswire.com/post/2007/08/unixlinux-command-cheat-sheet/&quot;&gt;Shell Cheatsheet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://explainshell.com&quot;&gt;Explain Shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-shell&quot;&gt;The Shell&lt;/h1&gt;

&lt;h2 id=&quot;learning-objectives&quot;&gt;Learning Objectives&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Describe what the shell is and how it is used.&lt;/li&gt;
  &lt;li&gt;Summarize reasons why learning the shell is beneficial.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;what-is-the-shell&quot;&gt;What is the shell?&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;shell&lt;/em&gt; is a program that presents a command line interface
which allows you to control your computer using commands entered
with a keyboard instead of controlling graphical user interfaces
(GUIs) with a mouse/keyboard combination.&lt;/p&gt;

&lt;p&gt;There are many reasons to learn about the shell.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For most bioinformatics tools, you have to use the shell. There is no
graphical interface.&lt;/li&gt;
  &lt;li&gt;The shell gives you &lt;strong&gt;power&lt;/strong&gt;. The command line gives you the power to do your work more efficiently and more quickly. When you need to do things tens to hundreds of times, knowing how to use the shell is transformative.&lt;/li&gt;
  &lt;li&gt;To use remote computers or cloud computing, you need to use the shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/BIT150_website/images/gvng.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unix is user-friendly. It’s just very selective about who its friends are.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;how-to-access-the-shell&quot;&gt;How to access the shell&lt;/h2&gt;

&lt;p&gt;The shell is already available on Mac and Linux. For Windows, you’ll
have to download a separate program.&lt;/p&gt;

&lt;h2 id=&quot;mac&quot;&gt;Mac&lt;/h2&gt;
&lt;p&gt;On Mac, the shell is available through the pre-installed &lt;em&gt;Terminal&lt;/em&gt; application: Applications -&amp;gt; Utilities -&amp;gt; Terminal
Go ahead and drag the Terminal application to your Dock for easy access.&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;For Windows, we’re going to be using gitbash.
Download and install &lt;a href=&quot;http://msysgit.github.io&quot;&gt;gitbash&lt;/a&gt; on your computer.
Open up the program.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;starting-with-the-shell&quot;&gt;Starting with the shell&lt;/h2&gt;

&lt;p&gt;We will spend most of our time learning about the basics of the shell by manipulating some experimental data.&lt;/p&gt;

&lt;p&gt;Now we’re going to download the data for the tutorial. For this you’ll need internet access, because you’re going to get it off the web.&lt;/p&gt;

&lt;p&gt;Open the shell.&lt;/p&gt;

&lt;p&gt;Enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/edamame-course/edamame-data.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command will grab all of the data needed for this workshop from the internet.  (We’re not going to talk about git right now, but it’s a tool for
implementing version control.)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now let’s go in to that directory&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The command &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; stands for ‘change directory’&lt;/p&gt;

&lt;p&gt;In this directory, there should be some things we just downloaded.
Let’s check. Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ls stands for ‘list’ and it returns the contents of a directory as a list.&lt;/p&gt;

&lt;p&gt;There are a few directories there, but not too many. Let’s go look in the data directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd shell
ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In there, all mixed up together are files and directories/folders. If we want to know which is which, we can type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -F
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Anything with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/&quot;&lt;/code&gt; after it is a directory.  Things with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; after them are programs. If there’s nothing there it’s a file.&lt;/p&gt;

&lt;p&gt;You can also use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; to see whether items in a directory are files or directories. &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; gives a lot more information too, such as the size of the file&lt;/p&gt;

&lt;p&gt;So, we can see that we have several files, directories and a program. Great!&lt;/p&gt;

&lt;h2 id=&quot;arguments&quot;&gt;Arguments&lt;/h2&gt;

&lt;p&gt;Most programs take additional arguments that control their exact behavior. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;-F&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; are arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; program, like many programs, take a lot of arguments. But how do we know what the options are to particular commands?&lt;/p&gt;

&lt;p&gt;Most commonly used shell programs have a manual. You can access the manual using the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program. Try entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;man ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will open the manual page for &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. Use the space key to go forward and b to go backwards. When you are done reading, just hit &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to quit.&lt;/p&gt;

&lt;p&gt;Programs that are run from the shell can get extremely complicated. To see an example, open up the manual page for the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; program. No one can possibly learn all of these arguments, of course. So you will probably find yourself referring back to the manual page frequently.&lt;/p&gt;

&lt;h2 id=&quot;the-unix-directory-file-structure-aka-where-am-i&quot;&gt;The Unix directory file structure (a.k.a. where am I?)&lt;/h2&gt;

&lt;p&gt;As you’ve already just seen, you can move around in different directories or folders at the command line. Why would you want to do this, rather than just navigating around the normal way.&lt;/p&gt;

&lt;p&gt;When you’re working with bioinformatics programs, you’re working with your data and it’s key to be able to have that data in the right place and make sure the program has access to the data. Many of the problems people run in to with command line bioinformatics programs is not having the data in the place the program expects it to be.&lt;/p&gt;

&lt;h2 id=&quot;moving-around-the-file-system&quot;&gt;Moving around the file system&lt;/h2&gt;

&lt;p&gt;Let’s practice moving around a bit.&lt;/p&gt;

&lt;p&gt;We’re going to work in that &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory we just downloaded.&lt;/p&gt;

&lt;p&gt;First let’s navigate there using the regular way by clicking on the different folders.&lt;/p&gt;

&lt;p&gt;First we did something like go to the folder of our username. Then we opened
&lt;code class=&quot;highlighter-rouge&quot;&gt;'edamame-data'&lt;/code&gt; then &lt;code class=&quot;highlighter-rouge&quot;&gt;'shell'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s draw out how that went.&lt;/p&gt;

&lt;p&gt;Now let’s draw some of the other files and folders we could have clicked on.&lt;/p&gt;

&lt;p&gt;This is called a hierarchical file system structure, like an upside down tree with root (/) at the base that looks like this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we’re going to try a hunt. Move around in the ‘hidden’ directory and try to find the file &lt;code class=&quot;highlighter-rouge&quot;&gt;'youfoundit.txt'&lt;/code&gt;
***&lt;/p&gt;

&lt;h2 id=&quot;examining-the-contents-of-other-directories&quot;&gt;Examining the contents of other directories&lt;/h2&gt;

&lt;p&gt;By default, the &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; commands lists the contents of the working directory (i.e. the directory you are in). You can always find the directory you are in using the &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt; command. However, you can also give &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; the names of other directories to view. Navigate to the home directory if you are not already there.&lt;/p&gt;

&lt;p&gt;Type:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls edamame-data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will list the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt; directory without you having to navigate there.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; command works in a similar way. Try entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data/shell/hidden
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and you will jump directly to &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt; without having to go through the intermediate directory.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Try finding the &lt;code class=&quot;highlighter-rouge&quot;&gt;'anotherfile.txt'&lt;/code&gt; file without changing directories.
&lt;em&gt;**&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;shortcut-tab-completion&quot;&gt;Shortcut: Tab Completion&lt;/h3&gt;

&lt;p&gt;Navigate to the home directory. Typing out directory names can waste a lot of time. When you start typing out the name of a directory, then hit the tab key, the shell will try to fill in the rest of the directory name. For example, enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd e&amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The shell will fill in the rest of the directory name for &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt;. Now go to edamame-data/shell/MiSeq&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls C01&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When you hit the first tab, nothing happens. The reason is that there
are multiple directories in the home directory which start with
&lt;code class=&quot;highlighter-rouge&quot;&gt;C01&lt;/code&gt;. Thus, the shell does not know which one to fill in. When you hit
tab again, the shell will list the possible choices.&lt;/p&gt;

&lt;p&gt;Tab completion can also fill in the names of programs. For example,
enter &lt;code class=&quot;highlighter-rouge&quot;&gt;e&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;/code&gt;. You will see the name of every program that
starts with an &lt;code class=&quot;highlighter-rouge&quot;&gt;e&lt;/code&gt;. One of those is &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;. If you enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ec&amp;lt;tab&amp;gt;&lt;/code&gt; you
will see that tab completion works.&lt;/p&gt;

&lt;h2 id=&quot;saving-time-with-shortcuts-wild-cards-and-tab-completion&quot;&gt;Saving time with shortcuts, wild cards, and tab completion&lt;/h2&gt;

&lt;h3 id=&quot;shortcuts&quot;&gt;Shortcuts&lt;/h3&gt;

&lt;p&gt;There are some shortcuts which you should know about. Dealing with the
home directory is very common. So, in the shell the tilde character,
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;~&quot;&lt;/code&gt;, is a shortcut for your home directory. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame&lt;/code&gt;
directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd
cd edamame-data
cd shell
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ~
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints the contents of your home directory, without you having to
type the full path. The shortcut &lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt; always refers to the directory
above your current directory. Thus:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ..
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data&lt;/code&gt;. You can chain
these together, so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ../../
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;prints the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username&lt;/code&gt; which is your home
directory. Finally, the special directory &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; always refers to your
current directory. So, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls .&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ././././.&lt;/code&gt; all do the
same thing, they print the contents of the current directory. This may
seem like a useless shortcut right now, but we’ll see when it is
needed in a little while.&lt;/p&gt;

&lt;p&gt;To summarize, while you are in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory, the commands
&lt;code class=&quot;highlighter-rouge&quot;&gt;ls ~&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ~/.&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ls ../../&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;ls /home/username&lt;/code&gt; all do exactly the
same thing. These shortcuts are not necessary, they are provided for
your convenience.&lt;/p&gt;

&lt;h3 id=&quot;wild-cards&quot;&gt;Wild cards&lt;/h3&gt;

&lt;p&gt;Navigate to the MiSeq directory using”&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/edamame-data/shell/MiSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This directory contains our FASTQ files and some other ones we’ll need for analyses. If we type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, we will see that there are a bunch of files with long file names. Some of the end with &lt;code class=&quot;highlighter-rouge&quot;&gt;.fastq&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character is a shortcut for “everything”. Thus, if you enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ls *&lt;/code&gt;, you will see all of the contents of a given directory. Now try this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls *fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This lists every file that ends with a &lt;code class=&quot;highlighter-rouge&quot;&gt;fastq&lt;/code&gt;. This command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls /usr/bin/*.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Lists every file in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; that ends in the characters &lt;code class=&quot;highlighter-rouge&quot;&gt;.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have paired end sequencing, so for every sample we have two files. If we want to just see the list of the files for the forward direction sequencing we can use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls *R*fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;lists every file in the current directory whose name contains the letter &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt;, and ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;fastq&lt;/code&gt;. There are twenty such files which
we would expect because we have 20 samples.&lt;/p&gt;

&lt;p&gt;So how does this actually work? Well…when the shell (bash) sees a word that contains the &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character, it automatically looks for filenames
that match the given pattern. In this case, it identified four such files. Then, it replaced the &lt;code class=&quot;highlighter-rouge&quot;&gt;*R*fastq&lt;/code&gt; with the list of files, separated by spaces.&lt;/p&gt;

&lt;p&gt;What happens if you do &lt;code class=&quot;highlighter-rouge&quot;&gt;R*fastq&lt;/code&gt;?&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do each of the following using a single &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; command without
navigating to a different directory.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that start with the letter ‘c&lt;/li&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that contain the letter ‘a’&lt;/li&gt;
  &lt;li&gt;List all of the files in &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; that end with the letter ‘o’&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;BONUS: List all of the files in ‘/bin’ that contain the letter ‘a’ or ‘c’&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;command-history&quot;&gt;Command History&lt;/h2&gt;

&lt;p&gt;You can easily access previous commands.  Hit the up arrow. Hit it again.  You can step backwards through your command history. The down arrow takes your forwards in the command history.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^-C&lt;/code&gt; will cancel the command you are writing, and give you a fresh prompt.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^-R&lt;/code&gt; will do a reverse-search through your command history.  This is very useful.&lt;/p&gt;

&lt;p&gt;You can also review your recent commands with the &lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; command.  Just enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;history
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;to see a numbered list of recent commands, including this just issues
&lt;code class=&quot;highlighter-rouge&quot;&gt;history&lt;/code&gt; command.  You can reuse one of these commands directly by
referring to the number of that command.&lt;/p&gt;

&lt;p&gt;If your history looked like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;259  ls *
260  ls /usr/bin/*.sh
261  ls *R*fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;then you could repeat command #260 by simply entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;!260
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(that’s an exclamation mark).&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find the line number in your history for the last exercise (listing
files in /bin) and reissue that command.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;examining-files&quot;&gt;Examining Files&lt;/h2&gt;

&lt;p&gt;We now know how to switch directories, run programs, and look at the
contents of directories, but how do we look at the contents of files?&lt;/p&gt;

&lt;p&gt;The easiest way to examine a file is to just print out all of the
contents using the program &lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt;. Enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cat C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints out the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercises&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Print out the contents of the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/edamame-data/shell/MiSeq/Centralia_mapping_files/Collapsed_Centralia_full_map.txt&lt;/code&gt;
file. What does this file contain?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Without changing directories, (you should still be in &lt;code class=&quot;highlighter-rouge&quot;&gt;edamame-data&lt;/code&gt;),
use one short command to print the contents of all of the files in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data/shell/MiSeq&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;Make sure we’re in the right place for the next set of the lessons. We
want to be in the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory. Check if you’re there with &lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;
and if not navigate there. One way to do that would be&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/edamame-data/shell/MiSeq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat&lt;/code&gt; is a terrific program, but when the file is really big, it can
be annoying to use. The program, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;, is useful for this
case. Enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;less C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; opens the file, and lets you navigate through it. The commands
are identical to the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some commands in &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;key&lt;/th&gt;
      &lt;th&gt;action&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“space”&lt;/td&gt;
      &lt;td&gt;to go forward&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“b”&lt;/td&gt;
      &lt;td&gt;to go backwarsd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“g”&lt;/td&gt;
      &lt;td&gt;to go to the beginning&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“G”&lt;/td&gt;
      &lt;td&gt;to go to the end&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“q”&lt;/td&gt;
      &lt;td&gt;to quit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; also gives you a way of searching through files. Just hit the
“/” key to begin a search. Enter the name of the word you would like
to search for and hit enter. It will jump to the next location where
that word is found. Try searching the &lt;code class=&quot;highlighter-rouge&quot;&gt;dictionary.txt&lt;/code&gt; file for the
word “cat”. If you hit “/” then “enter”, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; will just repeat
the previous search. &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; searches from the current location and
works its way forward. If you are at the end of the file and search
for the word “cat”, &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; will not find it. You need to go to the
beginning of the file and search.&lt;/p&gt;

&lt;p&gt;For instance, let’s search for the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;1101:14341&lt;/code&gt; in our file.
You can see that we go right to that sequence and can see
what it looks like.&lt;/p&gt;

&lt;p&gt;Remember, the &lt;code class=&quot;highlighter-rouge&quot;&gt;man&lt;/code&gt; program actually uses &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; internally and
therefore uses the same commands, so you can search documentation
using “/” as well!&lt;/p&gt;

&lt;p&gt;There’s another way that we can look at files, and in this case, just
look at part of them. This can be particularly useful if we just want
to see the beginning or end of the file, or see how it’s formatted.&lt;/p&gt;

&lt;p&gt;The commands are &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt; and they just let you look at
the beginning and end of a file respectively.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head C01D01F_sub.fastq
tail C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; option to either of these commands can be used to print the
first or last &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; lines of a file. To print the first/last line of the
file use:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;head -n 1 C01D01F_sub.fastq
tail -n 1 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;searching-files&quot;&gt;Searching files&lt;/h2&gt;

&lt;p&gt;We showed a little how to search within a file using &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. We can also
search within files without even opening them, using &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;. Grep is a command-line
utility for searching plain-text data sets for lines matching a string or regular expression.
Let’s give it a try!&lt;/p&gt;

&lt;p&gt;Let’s search for that sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;22029:7208&lt;/code&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep 22029:7208 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We get back the whole line that had &lt;code class=&quot;highlighter-rouge&quot;&gt;'22029:7208'&lt;/code&gt; in it. What if we wanted all
four lines, the whole part of that FASTQ sequence, back instead.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep -A 3 22029:7208 C01D01F_sub.fastq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;-A&lt;/code&gt; flag stands for “after match” so it’s returning the line that
matches plus the three after it. The &lt;code class=&quot;highlighter-rouge&quot;&gt;-B&lt;/code&gt; flag returns that number of lines
before the match.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Search for the sequence &lt;code class=&quot;highlighter-rouge&quot;&gt;'TTATCCGGATTTATTGGGTTTAAAGGGT'&lt;/code&gt; in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;C01D01F_sub.fastq&lt;/code&gt; file and in the output have the sequence name and the sequence. e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;@M00967:43:000000000-A3JHG:1:2114:11799:28499 1:N:0:188
TACGGAGGATGCGAGCGTTATCCGGATTTATTGGGTTTAAAGGGTGCGTAGGCGGGATGCAG&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search for that sequence in all the FASTQ files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;redirection--pipes&quot;&gt;Redirection / Pipes&lt;/h2&gt;

&lt;p&gt;We’re excited we have all these sequences that we care about that we just got from the FASTQ files. That is a really important motif that is going to help us answer our important question. But all those sequences just went whizzing by with grep. How can we capture them?&lt;/p&gt;

&lt;p&gt;We can do that with something called “redirection”. The idea is that we’re redirecting the output to the terminal (all the stuff that went whizzing by) to something else. In this case, we want to print it to a file, so that we can look at it later.&lt;/p&gt;

&lt;p&gt;The redirection command for putting something in a file is &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let’s try it out and put all the sequences that contain &lt;code class=&quot;highlighter-rouge&quot;&gt;'TTATCCGGATTTATTGGGTTTAAAGGGT'&lt;/code&gt;
from all the files in to another file called &lt;code class=&quot;highlighter-rouge&quot;&gt;'good-data2.txt'&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep -B 2 TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq &amp;gt; good-data2.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The prompt should sit there a little bit, and then it should look like nothing happened. But type &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. You should have a new file called &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.txt&lt;/code&gt;. Take a look at it and see if it has what you think it should.&lt;/p&gt;

&lt;p&gt;Another useful redirection command that is called a “pipe”, and it is invoked by typing the character &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; with a single space between itself and both commands that are being connected. It’s probably not a key on your keyboard you use very much. What &lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt; does is take the output that would usually be output to the terminal and redirects it as input for the next command. When it was all whizzing by before, we wished we could just slow it down and look at it, like we can with &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt;. Well it turns out that we can by piping the output of the &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command to the &lt;code class=&quot;highlighter-rouge&quot;&gt;less&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | less
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can use the arrows to scroll up and down and use &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; to get out.&lt;/p&gt;

&lt;p&gt;We can also do something tricky and use the command &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt; stands for
&lt;code class=&quot;highlighter-rouge&quot;&gt;word count&lt;/code&gt;. It counts the number of lines or characters. So, we can use
it to count the number of lines we’re getting back from our &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; command.
And that will magically tell us how many sequences we’re finding. We’re&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | wc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That tells us the number of lines, words and characters in the file. If we just want the number of lines, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-l&lt;/code&gt; flag for &lt;code class=&quot;highlighter-rouge&quot;&gt;lines&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep TTATCCGGATTTATTGGGTTTAAAGGGT *.fastq | wc -l
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Redirecting is not super intuitive, but it’s really powerful for stringing together these different commands, so you can do whatever you need to do.&lt;/p&gt;

&lt;p&gt;The philosophy behind these command line programs is that none of them really do anything all that impressive. BUT when you start chaining
them together, you can do some really powerful things really efficiently. If you want to be proficient at using the shell, you must learn to become proficient with the pipe and redirection operators:
&lt;code class=&quot;highlighter-rouge&quot;&gt;|&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;creating-moving-copying-and-removing&quot;&gt;Creating, moving, copying, and removing&lt;/h2&gt;

&lt;p&gt;Now we can move around in the file structure, look at files, search files, redirect. But what if we want to do normal things like copy files or move them around or get rid of them. Sure we could do most of these things without the command line, but what fun would that be?! Besides it’s often faster to do it at the command line, or you’ll be on a remote server like Amazon where you won’t have another option.&lt;/p&gt;

&lt;p&gt;The stability.files file is one that tells us what sample name goes with what sequences. This is a really important file, so we want to make a copy so we don’t lose it.&lt;/p&gt;

&lt;p&gt;Lets copy the file using the &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command. The &lt;code class=&quot;highlighter-rouge&quot;&gt;cp&lt;/code&gt; command backs up the file. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; directory and enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cp good-data2.txt good-data2.backup.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; has been created as a copy of &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s make a &lt;code class=&quot;highlighter-rouge&quot;&gt;backup&lt;/code&gt; directory where we can put this file.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt; command is used to make a directory. Just enter &lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;
followed by a space, then the directory name.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir backup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We can now move our backed up file in to this directory. We can
move files around using the command &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt;. Enter this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv good-data2.backup.txt backup/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This moves &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; into the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;backup/&lt;/code&gt; or
the full path would be &lt;code class=&quot;highlighter-rouge&quot;&gt;~/edamame-data/shell/MiSeq/backup&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;mv&lt;/code&gt; command is also how you rename files. Since this file is so
important, let’s rename it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mv backup/good-data2.backup.txt backup/good-data2.backup_IMPORTANT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the file name has been changed to good-data2.backup_IMPORTANT. Let’s delete
the backup file now:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm backup/good-data2.backup_IMPORTANT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; file removes the file. Be careful with this command. It doesn’t
just nicely put the files in the Trash. They’re really gone.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Short Exercise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Do the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rename the &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup_IMPORTANT&lt;/code&gt; file to &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create a directory in the &lt;code class=&quot;highlighter-rouge&quot;&gt;MiSeq&lt;/code&gt; directory called &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then, copy the &lt;code class=&quot;highlighter-rouge&quot;&gt;good-data2.backup.txt&lt;/code&gt; file into &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;By default, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, will NOT delete directories. You can tell &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt; to
delete a directory using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; option. Let’s delete that &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; directory
we just made. Enter the following command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;rm -r new&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;running-programs&quot;&gt;Running programs&lt;/h2&gt;

&lt;p&gt;Commands like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; are just ordinary programs on the computer. A program is just a file that you can &lt;em&gt;execute&lt;/em&gt;. The program &lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt; tells you the location of a particular program. For example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Will return “/bin/ls”. Thus, we can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; is a program that sits inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin&lt;/code&gt; directory. Now enter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which find
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You will see that &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; is a program that sits inside of the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;So … when we enter a program name, like &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;, and hit enter, how does the shell know where to look for that program? How does it know to run &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/ls&lt;/code&gt; when we enter &lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt;. The answer is that when we enter a program name and hit enter, there are a few standard places that the shell automatically looks. If it can’t find the program in any of those places, it will print an error saying “command not found”. Enter the command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo $PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will print out the value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable. More on environment variables later. Notice that a list of directories, separated by colon characters, is listed. These are the places the shell looks for programs to run. If your program is not in this list, then an error is printed. The shell ONLY checks in the places listed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;shell&lt;/code&gt; directory and list the contents. You will notice that there is a program (executable file) called &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; in this directory. Now, try to run the program by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should get an error saying that hello.sh cannot be found. That is because the directory &lt;code class=&quot;highlighter-rouge&quot;&gt;/home/username/edamame-data/shell&lt;/code&gt; is not in the
&lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt;. You can run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; program by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remember that &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; is a shortcut for the current working directory. This tells the shell to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; program which is located right here. So, you can run any program by entering the path to that program. You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;hello.sh&lt;/code&gt; equally well by specifying:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/username/edamame-data/shell/hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or by entering:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/edamame-data/shell/hello.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When there are no &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; characters, the shell assumes you want to look in one of the default places for the program.&lt;/p&gt;

&lt;h1 id=&quot;for-future-reference&quot;&gt;For Future Reference&lt;/h1&gt;

&lt;h1 id=&quot;finding-files&quot;&gt;Finding files&lt;/h1&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; program can be used to find files based on arbitrary criteria. Navigate to the &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt; directory and enter the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This prints the name of every file or directory, recursively, starting from the current directory. Let’s exclude all of the directories:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This tells &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; to locate only files. Now try these commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -name &quot;*1*&quot;
find . -type f -name &quot;*1*&quot; -or -name &quot;*2*&quot; -print
find . -type f -name &quot;*1*&quot; -and -name &quot;*2*&quot; -print
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; command can acquire a list of files and perform some
operation on each file. Try this command out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -exec grep Volume {} \;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This command finds every file starting from &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;. Then it searches each file for a line which contains the word “Volume”. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; refers to
the name of each file. The trailing &lt;code class=&quot;highlighter-rouge&quot;&gt;\;&lt;/code&gt; is used to terminate the command.  This command is slow, because it is calling a new instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; for each item the &lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; returns.&lt;/p&gt;

&lt;p&gt;A faster way to do this is to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -print | xargs grep Volume
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find&lt;/code&gt; generates a list of all the files we are interested in, then we pipe them to &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; takes the items given to it and passes them as arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;.  &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs&lt;/code&gt; generally only creates a single instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; (or whatever program it is running).&lt;/p&gt;

&lt;h2 id=&quot;wherehow-can-i-learn-more-about-the-shell&quot;&gt;Where/How can I learn more about the shell?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rik.smith-unna.com/command_line_bootcamp/?id=takvnrdbvjd&quot;&gt;Command-Line Boot camp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://files.fosswire.com/2007/08/fwunixref.pdf&quot;&gt;Command Reference&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://explainshell.com&quot;&gt;explainshell.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html&lt;/li&gt;
  &lt;li&gt;man bash&lt;/li&gt;
  &lt;li&gt;Google - if you don’t know how to do something, try a Google Search. Other people have probably had the same question.&lt;/li&gt;
  &lt;li&gt;Learn by doing. There’s no real other way to learn this than by trying it out.&lt;/li&gt;
  &lt;li&gt;Familiarize yourself with terminal-based text editors:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.howtogeek.com/howto/42980/the-beginners-guide-to-nano-the-linux-command-line-text-editor/&quot; target=&quot;_blank&quot;&gt;nano&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-the-emacs-editor-in-linux&quot; target=&quot;_blank&quot;&gt;emacs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://computers.tutsplus.com/tutorials/vim-for-beginners--cms-21118&quot; target=&quot;_blank&quot;&gt;vim&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Open pdfs from the command line, automate something you don’t really need to automate.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Project 1 - Mining bioinformatics databases</title>
   <link href="http://localhost:4000/2018/09/27/project-1/"/>
   <updated>2018-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/27/project-1</id>
   <content type="html">&lt;p&gt;The goal of this project is to explore online public databases and discover information on a gene that may be relevant to its role in diseases or other traits.&lt;/p&gt;

&lt;p&gt;First choose a trait. Human diseases work well because there have been studied so intensely, but other characteristics of humans, animals, plants, or even bacteria can work. I recommend sticking to model systems (human, mouse, Arabidopsis) - there is much more information about these organisms in most databases.&lt;/p&gt;

&lt;p&gt;Once you have chosen your trait, you need to find a gene that has been linked to that trait.
A useful place to start for Human traits is the &lt;a href=&quot;https://www.omim.org&quot;&gt;Online Mendelian Inheritance in Man&lt;/a&gt; databases. &lt;a href=&quot;https://www.wikipedia.org/&quot;&gt;Wikipedia&lt;/a&gt;, or just &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt; also work.&lt;/p&gt;

&lt;p&gt;Here are some trait - gene pairs as examples:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Trait&lt;/th&gt;
      &lt;th&gt;Gene&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Cystic Fibrosis&lt;/td&gt;
      &lt;td&gt;CFTR&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Acondroplasia&lt;/td&gt;
      &lt;td&gt;FGFR3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Breast Cancer&lt;/td&gt;
      &lt;td&gt;BRCA1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alzheimers disease&lt;/td&gt;
      &lt;td&gt;APOE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Type-2 Diabetes&lt;/td&gt;
      &lt;td&gt;INS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Mad cow disease&lt;/td&gt;
      &lt;td&gt;PRNP&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sprinter gene&lt;/td&gt;
      &lt;td&gt;ACTN3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Shade-response&lt;/td&gt;
      &lt;td&gt;PHYB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Flower defects&lt;/td&gt;
      &lt;td&gt;AP1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You’re goal in &lt;strong&gt;Projects 1 and 2&lt;/strong&gt; is to build a model for why mutations in this gene are associated with your trait.&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Project 1&lt;/strong&gt;, as a class I want you to explore as many different databases as possible to build a catalog of types of bioinformatics information available for different classes of genes. I want each of you to choose one database and prepare a Wiki page documenting the database. Use Markdown to compose your page. You can use the &lt;a href=&quot;https://hackmd.io/&quot;&gt;HackMD&lt;/a&gt; tool. Provide answers and links or images to address as many of the following questions as possible. Organize the information in a readable way. We will collect these into a class Wiki site at the end.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What type of data does the database hold? What types of biological questions could use this database to address?&lt;/li&gt;
  &lt;li&gt;Where does the data come from? Who collects it, currates it, and publishes it?&lt;/li&gt;
  &lt;li&gt;How are the data stored? In what format?&lt;/li&gt;
  &lt;li&gt;What tools are available for accessing the data?&lt;/li&gt;
  &lt;li&gt;Are there restrictions placed on how you are allowed to use the data? What is it’s license? What does this mean?&lt;/li&gt;
  &lt;li&gt;Find a paper that cites the database. Hint: use &lt;a href=&quot;https://scholar.google.com/&quot;&gt;Google scholar&lt;/a&gt;. What was the study and why did they use this database?&lt;/li&gt;
  &lt;li&gt;How many entries are there for your gene / mutation / disease?&lt;/li&gt;
  &lt;li&gt;Describe one entry. Provide a direct link to this entry. What did you learn about your gene?&lt;/li&gt;
  &lt;li&gt;Describe some types of biological questions that you could use this database to address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are some rules:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Every student must choose a different database. There are 1000s of databases available. Usefull lists
can be found &lt;a href=&quot;https://academic.oup.com/nar/article/45/D1/D1/2770636/The-24th-annual-Nucleic-Acids-Research-database&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_biological_databases#DNA_Databases&quot;&gt;here&lt;/a&gt;. When you choose a database, enter it in the google doc &lt;a href=&quot;https://docs.google.com/spreadsheets/d/1gpUUcnm7zhglA4vG8o2KivsalVzhVJmwRXBPyTFdBoE/edit?usp=sharing&quot;&gt;here&lt;/a&gt;.
Before you choose your database, ensure that someone else hasn’t chosen that one first!&lt;/li&gt;
  &lt;li&gt;The only limitation on the database is that it contains information on your groups gene or disease. Find a database
that looks interesting!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For &lt;strong&gt;Project 2&lt;/strong&gt;, you can refer back to this class resource to identify types of data that you can integrate to build a model for your gene.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: If you find a databases that you want to explore that indexes something other than genes, ask&lt;/strong&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Lab 1 - Intro to Bioinformatics Databases</title>
   <link href="http://localhost:4000/2018/09/27/lab-01/"/>
   <updated>2018-09-27T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/27/lab-01</id>
   <content type="html">&lt;h2 id=&quot;1-lab-intro&quot;&gt;1. Lab intro&lt;/h2&gt;

&lt;h2 id=&quot;2-answer-questions-about-human-hemoglobin---subunit-beta&quot;&gt;2. Answer questions about Human Hemoglobin - subunit beta&lt;/h2&gt;

&lt;h3 id=&quot;what-chromosome-is-hbb-on&quot;&gt;What chromosome is HBB on?&lt;/h3&gt;
&lt;h3 id=&quot;how-many-exons-does-this-gene-have&quot;&gt;How many exons does this gene have?&lt;/h3&gt;
&lt;h3 id=&quot;briefly-describe-how-the-gene-works&quot;&gt;Briefly describe how the gene works?&lt;/h3&gt;
&lt;h3 id=&quot;what-diseases-are-caused-by-mutations-in-the-gene&quot;&gt;What diseases are caused by mutations in the gene?&lt;/h3&gt;
&lt;h3 id=&quot;find-a-paper-that-describes-an-aspect-of-hbbs-function&quot;&gt;Find a paper that describes an aspect of HBB’s function&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://hackmd.io/&quot;&gt;HackMD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Copy these questions to a new document and save as Lab1.md&lt;/li&gt;
  &lt;li&gt;Fill in answers to each qustion&lt;/li&gt;
  &lt;li&gt;Export as HTML&lt;/li&gt;
  &lt;li&gt;Submit file on Canvas under Assignments&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a guide to composing documents using Markdown: &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On HackMD, you can collaborate on documents by sharing the URL. You can also download the document to your computer to save it, and re-upload it later. You can also drag images onto your document and it will upload them.&lt;/p&gt;

&lt;h2 id=&quot;3-exploration-of-ncbi&quot;&gt;3. Exploration of &lt;a href=&quot;https://www.ncbi.nlm.nih.gov/&quot;&gt;NCBI&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;4-begin-project-1&quot;&gt;4. Begin &lt;a href=&quot;/BIT150_website/2018/09/27/project-1/&quot;&gt;Project 1&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lists of databases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://academic.oup.com/nar/article/45/D1/D1/2770636/The-24th-annual-Nucleic-Acids-Research-database&quot;&gt;Nucleic Acids Research&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_biological_databases#DNA_Databases&quot;&gt;Wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://omictools.com/&quot;&gt;OmicsTools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;5-intro-to-the-unix-shell&quot;&gt;5. Intro to the Unix Shell&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://deruncie.github.io/shell-novice/&quot;&gt;Tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/BIT150_website/2018/09/27/unix_commands/&quot;&gt;Unix commands cheatsheat&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;if-you-want-extra-practice-after-completing-the-in-class-tutorial-try-working-through-a-supplemental-lesson-here&quot;&gt;If you want extra practice after completing the in-class tutorial, try working through a supplemental lesson &lt;a href=&quot;/BIT150_website/2018/09/27/command-line/&quot;&gt;here&lt;/a&gt;.&lt;/h3&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome BIT150 class of 2017!</title>
   <link href="http://localhost:4000/2018/09/25/welcome/"/>
   <updated>2018-09-25T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/25/welcome</id>
   <content type="html">&lt;p&gt;Welcome to BIT150.&lt;/p&gt;

&lt;p&gt;The first lecture will be on Thursday 9/27 at 10:00 in Wickson 1038.&lt;/p&gt;

&lt;p&gt;Prior to class, please read the &lt;a href=&quot;http://genome.cshlp.org/content/25/10/1417.short&quot; target=&quot;_blank&quot;&gt;Schatz 2015 paper&lt;/a&gt;, and complete the BIT 150 Pre-Class Assessment - both available on the CANVAS site. The paper discusses the future of biological research over the next 20 years. Hopefully it will provide motivation for the content we’ll cover this quarter. The quiz is a refresher on biological concepts that we will build on throughout the course.&lt;/p&gt;

&lt;p&gt;We look forward to meeting you on Thursday!&lt;/p&gt;

&lt;p&gt;Dan and Saghi&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Slack Workspace for BIT150</title>
   <link href="http://localhost:4000/2018/09/25/slack_site/"/>
   <updated>2018-09-25T00:00:00-07:00</updated>
   <id>http://localhost:4000/BIT150_website/2018/09/25/slack_site</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.slack.com/features&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt; is one method of staying connected that has been widely adopted by different groups within the UC Davis community. Dan and I have created a Slack workspace specifically for our use this quarter in the BIT150 class.&lt;/p&gt;

&lt;p&gt;On the &lt;strong&gt;ucdavis&lt;/strong&gt; Slack workspace, search for &lt;code class=&quot;highlighter-rouge&quot;&gt;bit150-2018&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Some benefits for us to use slack are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sharing documents with one another&lt;/li&gt;
  &lt;li&gt;group messaging&lt;/li&gt;
  &lt;li&gt;direct messaging&lt;/li&gt;
  &lt;li&gt;asking questions about course related content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using slack is not a requirement, but it is a great way for connecting with one another when we are not in class.&lt;/p&gt;

&lt;p&gt;If you have any questions about slack, please feel free to e-mail us:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;mailto:deruncie@ucdavis.edu&quot;&gt;deruncie@ucdavis.edu&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;mailto:sgnojoomi@ucdavis.edu&quot;&gt;sgnojoomi@ucdavis.edu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;OR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Write the questions directly in the slack workspace once you join!&lt;/p&gt;

&lt;p&gt;Dan and Saghi&lt;/p&gt;
</content>
 </entry>
 

</feed>
